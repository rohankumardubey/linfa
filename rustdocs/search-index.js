var searchIndex = JSON.parse('{\
"linfa":{"doc":"<code>linfa</code> aims to provide a comprehensive toolkit to build â€¦","t":[2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,5,5,3,3,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,3,16,16,6,3,6,6,16,16,16,16,8,8,16,16,8,8,16,16,3,8,8,16,8,8,8,8,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,11,11,11,11,10,11,11,4,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,3,8,8,8,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,8,10,10,11,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,8,16,16,16,8,8,8,10,10,10,10,10,10],"n":["Dataset","DatasetBase","DatasetPr","DatasetView","Error","Float","Label","ParamGuard","benchmarks","composing","correlation","dataset","error","metrics","param_guard","prelude","traits","config","get_default_profiling_configs","set_default_benchmark_configs","MultiClassModel","MultiTargetModel","Platt","PlattError","PlattParams","borrow","borrow","borrow_mut","borrow_mut","default_target","default_target","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_iter","from_iter","init","init","into","into","new","new","platt_scaling","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LineSearchNotConverged","LinfaError","MaxIterReached","MaxIterZero","MinStepNegative","Platt","PlattError","PlattParams","PlattValidParams","SigmaNegative","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default_target","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fit_with","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","into","into","into","into","maxiter","minstep","params","platt_newton_method","platt_predict","predict","predict","predict","predict","predict_inplace","provide","serialize","sigma","source","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","PearsonCorrelation","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","from_dataset","get_coeffs","get_p_values","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","AsMultiTargets","AsMultiTargetsMut","AsProbabilities","AsSingleTargets","AsSingleTargetsMut","AsTargets","AsTargetsMut","CountedTargets","D","D","Dataset","DatasetBase","DatasetPr","DatasetView","Elem","Elem","Elem","Elem","Float","FromTargetArray","Ix","Ix","Label","Labels","Lapack","Owned","Pr","Records","TargetDim","View","WithLapack","WithLapackData","WithoutLapack","WithoutLapackData","as_multi_target_probabilities","as_multi_targets","as_multi_targets_mut","as_single_targets","as_single_targets_mut","as_targets","as_targets","as_targets","as_targets_mut","as_targets_mut","as_targets_mut","bootstrap","bootstrap_features","bootstrap_samples","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone_into","clone_into","clone_into","confusion_matrix","cross_validate","cross_validate_single","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","even","feature_iter","feature_names","fmt","fmt","fmt","fold","from","from","from","from","from","init","init","init","into","into","into","into_single_target","into_single_target","iter_fold","label_count","label_count","label_count","label_frequencies","label_frequencies_with_mask","label_set","labels","log_loss","map_targets","new","new","new","new_targets","new_targets","new_targets_view","new_targets_view","new_unchecked","nfeatures","nfeatures","nsamples","nsamples","nsamples","ntargets","one_vs_all","partial_cmp","pearson_correlation","pearson_correlation_with_p_value","records","records","roc","sample_chunks","sample_iter","shuffle","silhouette_score","split_with_ratio","split_with_ratio","split_with_ratio","target_iter","targets","targets","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","vzip","vzip","vzip","weight_for","weights","weights","with_feature_names","with_labels","with_lapack","with_lapack","with_lapack","with_records","with_targets","with_weights","without_lapack","without_lapack","without_lapack","Error","MismatchedShapes","NdShape","NotConverged","NotEnoughSamples","Parameters","Priors","Result","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","init","into","provide","serialize","source","to_owned","to_string","try_from","try_into","type_id","vzip","BinaryClassification","ConfusionMatrix","MultiTargetRegression","ReceiverOperatingCharacteristic","SilhouetteScore","SingleTargetRegression","ToConfusionMatrix","accuracy","area_under_curve","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","confusion_matrix","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","explained_variance","explained_variance","explained_variance","explained_variance","f1_score","f_score","fmt","fmt","from","from","get_curve","get_thresholds","init","init","into","into","log_loss","max_error","max_error","max_error","max_error","mcc","mean_absolute_error","mean_absolute_error","mean_absolute_error","mean_absolute_error","mean_absolute_percentage_error","mean_absolute_percentage_error","mean_absolute_percentage_error","mean_absolute_percentage_error","mean_squared_error","mean_squared_error","mean_squared_error","mean_squared_error","mean_squared_log_error","mean_squared_log_error","mean_squared_log_error","mean_squared_log_error","median_absolute_error","median_absolute_error","median_absolute_error","median_absolute_error","precision","r2","r2","r2","r2","recall","roc","silhouette_score","split_one_vs_all","split_one_vs_one","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Checked","Error","ParamGuard","TransformGuard","check","check_ref","check_unwrap","AsTargets","BinaryClassification","ConfusionMatrix","Dataset","DatasetBase","DatasetView","Error","Float","MultiTargetRegression","ParamGuard","PearsonCorrelation","Pr","Records","SilhouetteScore","SingleTargetRegression","ToConfusionMatrix","Fit","FitWith","Object","ObjectIn","ObjectOut","Predict","PredictInplace","Transformer","default_target","fit","fit_with","predict","predict_inplace","transform"],"q":["linfa","","","","","","","","","","","","","","","","","linfa::benchmarks","linfa::benchmarks::config","","linfa::composing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::composing::platt_scaling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::correlation","","","","","","","","","","","","","","","","","","","","","","","","linfa::dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa::param_guard","","","","","","","linfa::prelude","","","","","","","","","","","","","","","","linfa::traits","","","","","","","","","","","","",""],"d":["","","","","","","","","","Composition models","Correlation analysis for dataset features","Datasets","Error types in Linfa","Common metrics functions for classification and regression","","Linfa prelude.","Provide traits for different classes of algorithms","","","","Merge models with binary to multi-class classification","Merge models with single target to multi-target models","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a wrapper model from a list of single-target models","Implement Platt calibration with Newton method","","","","","","","","","","","","","","","","","","","","","","","","Fitted Platt model","Platt Newtonâ€™s method errors","","Parameters for Plattâ€™s Newton method","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calibrate another model with Platt scaling","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the maximum number of iterations in the optimization â€¦","Set the minimum stepsize in the line search","Create default parameter set for the Platt scaling â€¦","Run Newtonâ€™s method to find optimal <code>A</code> and <code>B</code> values","Predict a probability with the sigmoid function","","","","","","","","Set the Hessianâ€™s sigma value","","","","","","","","","","","","","","","","","","","","","","","Pearson Correlation Coefficients (or Bivariate â€¦","","","","","","","","","","","","Returns the argument unchanged.","Calculate the Pearson Correlation Coefficients and â€¦","Return the Pearsonâ€™s Correlation Coefficients","Return the p values supporting the null-hypothesis","","Calls <code>U::from(self)</code>.","","","","","","","Return a reference to multi-target variables.","Returns a mutable reference to multi-target variables.","Convert to probability matrix","Return a reference to single-target variables.","Returns a mutable reference to single-target variables.","Return a reference to single or multiple target variables.","Return a mutable reference to single or multiple target â€¦","Targets with precomputed, counted labels","","","Dataset","DatasetBase","DatasetPr","DatasetView","","","","","Floating point numbers","Helper trait to construct counted labels","","","Discrete labels","Get the labels in all targets","","","Probability types","Record trait","","","Add the Lapack bound to the floating point of a dataset","","Remove the Lapack bound to the floating point of a dataset","","","","","","","","","","","","","Apply bootstrapping for samples and features","Apply feature bootstrapping","Apply sample bootstrapping","","","","","","","","","","","","","","","Cross validation for single and multi-target algorithms","Specialized version of <code>cross_validate</code> for single-target â€¦","","","","","","","","","","","","","","","","","Iterate over features","Returns feature names","","","","Performs K-folding on the dataset.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Performs k-folding cross validation on fittable algorithms.","","","","Calculates label frequencies from a dataset","Calculates label frequencies from a dataset while masking â€¦","","","Log loss of the probabilities of the binary target","Map targets with a function <code>f</code>","Creates probability from the given float.","Create a new dataset from records and targets","","Create self object from new target array","","","","Creates probability from the given float. Doesnâ€™t check â€¦","","","","","","Return the number of targets in the dataset","Produce N boolean targets from multi-class targets","","Calculate the Pearson Correlation Coefficients from a â€¦","Calculate the Pearson Correlation Coefficients and â€¦","Return records of a dataset","","","","Iterate over observations","Produces a shuffled version of the current Dataset.","","Split dataset into two disjoint chunks","Split dataset into two disjoint chunks","Split dataset into two disjoint chunks","Iterate over targets","Returns reference to targets","","","","","","","","","","","","","","","","Creates a view of a dataset","","","","Return a single weight","Returns optionally weights","","Updates the feature names of a dataset","Transforms the input dataset by keeping only those samples â€¦","","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArrayâ€™s floating â€¦","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArrayâ€™s floating â€¦","Updates the records of a dataset","Updates the targets of a dataset","Updates the weights of a dataset","","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArrayâ€™s floating â€¦","Add trait bound <code>Lapack</code> and <code>Scalar</code> to NdArrayâ€™s floating â€¦","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Classification for binary-labels","Confusion matrix for multi-label evaluation","Regression metrices trait for multiple targets.","A Receiver Operating Characteristic for binary-label â€¦","Evaluates the quality of a clustering using euclidean â€¦","Regression metrices trait for single targets.","Classification for multi-label evaluation","Accuracy score","Returns the Area-Under-Curve metric","","","","","","","","","","","","","","","","","","Same as R-Squared but with biased variance","Same as R-Squared but with biased variance","Same as R-Squared but with biased variance","Same as R-Squared but with biased variance","F1-score, this is the F-beta-score for beta=1","F-beta-score","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the true-positive, false-positive curve","Returns the threshold corresponding to each point","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Maximal error between two continuous variables","Maximal error between two continuous variables","Maximal error between two continuous variables","Maximal error between two continuous variables","Matthew Correlation Coefficients","Mean error between two continuous variables","Mean error between two continuous variables","Mean error between two continuous variables","Mean error between two continuous variables","Mean absolute percentage error between two continuous â€¦","Mean absolute percentage error between two continuous â€¦","Mean absolute percentage error between two continuous â€¦","Mean absolute percentage error between two continuous â€¦","Mean squared error between two continuous variables","Mean squared error between two continuous variables","Mean squared error between two continuous variables","Mean squared error between two continuous variables","Mean squared log error between two continuous variables","Mean squared log error between two continuous variables","Mean squared log error between two continuous variables","Mean squared log error between two continuous variables","Median absolute error between two continuous variables","Median absolute error between two continuous variables","Median absolute error between two continuous variables","Median absolute error between two continuous variables","Precision score, the number of correct classifications for â€¦","R squared coefficient, is the proportion of the variance â€¦","R squared coefficient, is the proportion of the variance â€¦","R squared coefficient, is the proportion of the variance â€¦","R squared coefficient, is the proportion of the variance â€¦","Recall score, the number of correct classifications in the â€¦","","Evaluates the quality of a clustering.","Split confusion matrix in N one-vs-all binary confusion â€¦","Split confusion matrix in N*(N-1)/2 one-vs-one binary â€¦","","","","","","","","","","","The checked hyperparameters","Error type resulting from failed hyperparameter checking","A set of hyperparameters whose values have not been â€¦","Implement this trait to opt into a blanket <code>Transformer</code> â€¦","Checks the hyperparameters and returns the checked â€¦","Checks the hyperparameters and returns a reference to the â€¦","Calls <code>check()</code> and unwraps the result","","","","","","","","","","","","","","","","","Fittable algorithms","Incremental algorithms","","","","Predict with model","Predict with model into a mutable reference of targets.","Transformation algorithms","Create targets that <code>predict_inplace</code> works with.","","","","Predict something in place",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,8,8,8,8,10,10,10,10,8,10,8,10,8,10,8,10,8,10,24,24,24,24,24,0,0,0,0,24,25,26,23,24,25,26,23,24,23,23,25,26,23,24,25,26,23,24,23,25,25,26,23,24,25,26,23,24,24,25,26,23,24,25,26,23,25,26,23,26,25,26,23,24,24,25,26,23,24,24,25,26,23,24,25,26,23,24,23,23,25,0,0,25,25,25,25,25,24,24,23,24,25,26,23,24,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,0,0,74,75,0,0,0,0,15,46,50,64,0,0,46,50,0,0,22,76,0,0,0,76,0,0,0,0,77,78,79,66,80,46,18,48,50,18,48,18,18,18,27,18,48,27,18,48,22,27,18,48,27,18,48,18,18,18,27,27,27,18,48,27,18,48,27,18,48,27,18,48,48,27,18,18,27,18,48,18,27,18,18,18,48,27,18,48,27,18,48,60,18,18,64,18,48,18,18,64,64,18,18,27,18,48,76,48,76,48,27,15,18,15,55,18,18,18,27,18,18,18,18,18,18,18,18,18,60,18,18,18,18,18,27,18,18,48,27,27,18,48,27,18,48,27,18,48,18,27,18,48,18,18,18,18,18,81,74,74,18,18,18,82,75,75,0,33,33,33,33,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,0,0,53,69,53,69,53,69,53,69,53,69,83,53,69,53,69,53,69,53,69,84,84,85,85,53,53,53,69,53,69,69,69,53,69,53,69,86,84,84,85,85,53,84,84,85,85,84,84,85,85,84,84,85,85,84,84,85,85,84,84,85,85,53,84,84,85,85,53,86,87,53,53,53,69,53,69,53,69,53,69,53,69,88,88,0,0,88,88,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,90,0,0,0,16,89,90,91,16,92],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[8,[[5,[3,4]],[0,[6,7]]]],5],[[9,[[0,[6,7]]]]]],[[[10,[[5,[3,4]],7]],5],[[11,[7]]]],[12],[12],[12],[12],[12],[12],[[]],[[]],[13,[[8,[[5,[3,4]]]]]],[13,[[10,[[5,[3,4]]]]]],[[],12],[[],12],[[]],[[]],[14,[[8,[15]]]],[[[14,[[17,[16]]]]],[[10,[15]]]],0,[18,18],[18],[5],[[[5,[19]]],[[18,[[5,[19]]]]]],[18],[[[5,[19]]],[[18,[[5,[19]]]]]],[5],[18,18],[[[8,[[5,[3,4]],[0,[6,7]]]],5,9]],[[[10,[[5,[3,4]],7]],5,11]],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]],[[20,[24]]]],[[[23,[22]]],[[20,[24]]]],[[[25,[6,6]]],[[25,[6,6]]]],[[[26,[6,6]]],[[26,[6,6]]]],[[[23,[6,6]]],[[23,[6,6]]]],[24,24],[[]],[[]],[[]],[[]],[[],[[23,[22]]]],[[[25,[22]],5],[[9,[27]]]],[12],[12],[12],[12],[12],[12],[12],[12],[[],[[20,[24]]]],[12],[12],[12],[12],[[[25,[28,28]],25],29],[[[26,[28,28]],26],29],[[[23,[28,28]],23],29],[[],29],[[],29],[[],29],[[[26,[22]],18],[[20,[24]]]],[[[25,[30,30]],31],32],[[[26,[30,30]],31],32],[[[23,[30,30]],31],32],[[24,31],32],[[24,31],32],[[]],[[]],[[]],[[]],[33,24],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[[23,[22]],12],[[23,[22]]]],[[[23,[22]],22],[[23,[22]]]],[[],[[23,[22]]]],[[[34,[22]],[34,[29]],26],[[20,[24]]]],[[22,22,22],27],[[[5,[19]]],[[18,[[5,[19]]]]]],[18,18],[5],[18],[[[25,[22]],5,9]],[35],[24,20],[[[23,[22]],22],[[23,[22]]]],[24,[[37,[36]]]],[[]],[[]],[[]],[[]],[[],38],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[39,[6]]],[[39,[6]]]],[[]],[12],[12],[12],[[[39,[28]],39],29],[[],29],[[[39,[30]],31],32],[[[39,[22]],31],32],[[]],[[18,[37,[12]]],[[39,[22]]]],[[[39,[22]]],9],[[[39,[22]]],[[37,[9]]]],[[],12],[[]],[[]],[[],38],[[],20],[[],20],[[],21],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[41,[27,40]]]],[[],42],[[],43],[[],34],[[],44],[[],45],[[[18,[15,46]]],45],[[[48,[47,46]]],45],[[],49],[[[18,[15,50]]],49],[[[48,[47,50]]],49],[[[18,[[5,[4]]]]],51],[[[18,[[5,[4]]]],12],51],[[[18,[[5,[4]]]],12],51],[[]],[[]],[[]],[[]],[[]],[[]],[52],[27,27],[[[18,[6]]],[[18,[6]]]],[[[48,[[0,[6,47]],6]]],[[48,[[0,[6,47]],6]]]],[[]],[[]],[[]],[[18,18],[[54,[[53,[47]]]]]],[[[18,[[5,[4]],[5,[55]]]],12],[[20,[[56,[55]]]]]],[[[18,[[5,[4]],[5,[57]]]],12],[[20,[9]]]],[[],27],[27,58],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[27,27],29],[[[18,[28]],18],29],[[[48,[[0,[28,47]],28]],48],29],[[],29],[[],27],[[[18,[[5,[4]]]]],[[0,[[5,[4]]]]]],[[[18,[15]]],[[14,[38]]]],[[27,31],32],[[[18,[30]],31],32],[[[48,[[0,[30,47]],30]],31],32],[[[18,[[5,[4]]]],12],14],[[]],[[]],[[],[[18,[[5,[4]],[5,[55]]]]]],[[[5,[3,59]]],[[18,[[5,[3,59]],9]]]],[[]],[[],12],[[],12],[[],12],[[]],[[]],[[]],[60,[[60,[57]]]],[[[18,[[5,[61,19]],[5,[61]]]]],[[60,[57]]]],[[[18,[[5,[4]],[5,[55]]]],12,62],51],[[],[[14,[[63,[12]]]]]],[[[18,[15,64]]],[[14,[[63,[47,12]]]]]],[[[48,[47,46]]],[[14,[[63,[47,12]]]]]],[[[18,[15,46]]],[[63,[47,58]]]],[[[18,[15,46]]],[[63,[47,58]]]],[[],[[14,[65]]]],[[],14],[[[18,[15,66]],18],[[54,[58]]]],[[[18,[15,46]],67],[[18,[15,56]]]],[58,27],[15,[[18,[15]]]],[64,[[48,[47,64]]]],[56],[[[56,[47]]]],[45],[[[45,[47]]]],[58,27],[[],12],[[[18,[15]]],12],[[],12],[12],[[[18,[15]]],12],[[[18,[15,46]]],12],[[[18,[[5,[4]]]]],[[54,[14]]]],[[27,27],[[37,[68]]]],[[[18,[[5,[3,4]]]]],[[39,[22]]]],[[[18,[[5,[3,4]]]],12],[[39,[22]]]],[[[18,[15]]]],0,[[[18,[15,66]],18],[[54,[69]]]],[[[18,[[5,[4]]]],12],[[0,[6]]]],0,[[[18,[[5,[4]]]]],[[18,[[11,[6]]]]]],[[[18,[[5,[3,4]],[0,[66,64]]]]],[[54,[22]]]],[[[60,[55]],58]],[[[18,[42]],58]],[[[18,[[5,[61,19]],[5,[61,55]]]],58]],[[[18,[[5,[4]]]]],[[0,[[5,[4]]]]]],[[[18,[15]]]],0,[[]],[[]],[[[18,[[5,[4]]]]],[[18,[[11,[6]]]]]],[[]],[58,[[20,[27]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[[18,[[5,[4]]]]],[[18,[42]]]],[[]],[[]],[[]],[[[18,[15]],12],58],[[[18,[15]]],37],0,[[[18,[15]],[14,[[70,[38]]]]],[[18,[15]]]],[[[18,[[5,[4]]]]],[[18,[[11,[71]],[48,[[0,[71,47]],[56,[[0,[71,47]]]]]]]]]],[[],5],[5,5],[5,5],[[[18,[15]],15],[[18,[15]]]],[[[18,[15]]],[[18,[15]]]],[[[18,[15]],[9,[58]]],[[18,[15]]]],[[],5],[5,5],[5,5],0,0,0,0,0,0,0,0,[[]],[[]],[33,33],[[]],[12],[12],[[],[[20,[33]]]],[12],[[33,31],32],[[33,31],32],[[]],[72,33],[[],12],[[]],[35],[33,20],[33,[[37,[36]]]],[[]],[[],38],[[],20],[[],20],[[],21],[[]],0,0,0,0,0,0,0,[53,58],[69,58],[[]],[[]],[[]],[[]],[[[53,[6]]],[[53,[6]]]],[69,69],[[]],[[]],[[],[[54,[53]]]],[12],[12],[12],[12],[12],[12],[[[53,[28]],53],29],[[69,69],29],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[53,58],[[53,58],58],[[[53,[73]],31],32],[[69,31],32],[[]],[[]],[69,14],[69,[[14,[58]]]],[[],12],[[],12],[[]],[[]],[[],[[54,[58]]]],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[53,58],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[53,58],[[],54],[[],54],[[],[[54,[9]]]],[[],[[54,[9]]]],[53,58],[[],[[54,[69]]]],[[],54],[53,[[14,[[53,[29]]]]]],[53,[[14,[[53,[29]]]]]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[]],[[]],0,0,0,0,[[],20],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[18,20],[18,20],[[]],[[]],[[]]],"p":[[3,"Criterion"],[3,"BenchmarkGroup"],[8,"Data"],[6,"Ix2"],[3,"ArrayBase"],[8,"Clone"],[8,"Default"],[3,"MultiClassModel"],[6,"Array1"],[3,"MultiTargetModel"],[6,"Array2"],[15,"usize"],[8,"IntoIterator"],[3,"Vec"],[8,"Records"],[8,"PredictInplace"],[3,"Box"],[3,"DatasetBase"],[3,"Dim"],[4,"Result"],[3,"TypeId"],[8,"Float"],[3,"PlattParams"],[4,"PlattError"],[3,"Platt"],[3,"PlattValidParams"],[3,"Pr"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Error"],[6,"ArrayView1"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"PearsonCorrelation"],[6,"Ix3"],[6,"CowArray"],[6,"ArrayView2"],[6,"ArrayViewMut2"],[6,"ArrayViewMut1"],[6,"ArrayView"],[8,"AsTargets"],[8,"Label"],[3,"CountedTargets"],[6,"ArrayViewMut"],[8,"AsTargetsMut"],[8,"Iterator"],[8,"NumCast"],[3,"ConfusionMatrix"],[6,"Result"],[8,"TargetDim"],[6,"Array"],[6,"Ix1"],[15,"f32"],[8,"Dimension"],[6,"Dataset"],[3,"OwnedRepr"],[8,"Fn"],[3,"HashMap"],[8,"Labels"],[3,"HashSet"],[8,"AsSingleTargets"],[8,"FnMut"],[4,"Ordering"],[3,"ReceiverOperatingCharacteristic"],[8,"Into"],[8,"Copy"],[3,"ShapeError"],[8,"Display"],[8,"WithLapackData"],[8,"WithoutLapackData"],[8,"FromTargetArray"],[8,"AsProbabilities"],[8,"AsMultiTargets"],[8,"AsMultiTargetsMut"],[8,"AsSingleTargetsMut"],[8,"WithLapack"],[8,"WithoutLapack"],[8,"ToConfusionMatrix"],[8,"SingleTargetRegression"],[8,"MultiTargetRegression"],[8,"BinaryClassification"],[8,"SilhouetteScore"],[8,"ParamGuard"],[8,"Fit"],[8,"FitWith"],[8,"Predict"],[8,"Transformer"]]},\
"linfa_bayes":{"doc":"Naive Bayes","t":[13,3,3,3,13,3,3,3,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BaseCrate","GaussianNb","GaussianNbParams","GaussianNbValidParams","InvalidSmoothing","MultinomialNb","MultinomialNbParams","MultinomialNbValidParams","NaiveBayesError","Result","Stats","alpha","alpha","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check_ref","check_ref","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default_target","default_target","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","fit","fit","fit_with","fit_with","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","new","new","params","params","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","provide","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","var_smoothing","var_smoothing","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["linfa_bayes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Fitted Gaussian Naive Bayes classifier.","A hyper-parameter set during construction for a Gaussian â€¦","A verified hyper-parameter set ready for the estimation of â€¦","Invalid smoothing parameter","Fitted Multinomial Naive Bayes classifier.","A hyper-parameter set during construction for a â€¦","A verified hyper-parameter set ready for the estimation of â€¦","Error variants from hyper-parameter construction or model â€¦","Simplified <code>Result</code> using <code>NaiveBayesError</code> as error type","Error when performing Max operation on data","Get the variance smoothing","Specifies the portion of the largest variance of all the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new GaussianNbParams set with default values for â€¦","Create new MultinomialNbParams set with default values for â€¦","Construct a new set of hyperparameters","Construct a new set of hyperparameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the variance smoothing","Specifies the portion of the largest variance of all the â€¦","","","","","","",""],"i":[20,0,0,0,20,0,0,0,0,0,20,2,3,20,10,11,4,2,3,12,20,10,11,4,2,3,12,4,3,4,3,10,11,4,2,3,12,10,11,4,2,3,12,4,3,10,12,20,10,11,4,2,3,12,20,10,11,4,2,3,12,20,10,11,4,2,3,12,10,11,4,2,3,12,11,2,11,2,20,20,10,11,4,2,3,12,20,20,20,10,11,4,2,3,12,20,10,11,4,2,3,12,20,10,11,4,2,3,12,4,3,10,12,10,10,10,10,12,12,12,12,10,12,20,20,10,11,4,2,3,12,20,20,10,11,4,2,3,12,20,10,11,4,2,3,12,20,10,11,4,2,3,12,11,4,20,10,11,4,2,3,12],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],1],[[[3,[1]],1],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[1]]],5],[[[3,[1]]],5],[[[4,[1]]],5],[[[3,[1]]],5],[[[10,[[0,[6,7]],[0,[6,8,9]]]]],[[10,[[0,[6,7]],[0,[6,8,9]]]]]],[[[11,[6,6]]],[[11,[6,6]]]],[[[4,[6,6]]],[[4,[6,6]]]],[[[2,[6,6]]],[[2,[6,6]]]],[[[3,[6,6]]],[[3,[6,6]]]],[[[12,[[0,[6,7]],[0,[6,8,9]]]]],[[12,[[0,[6,7]],[0,[6,8,9]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[1]]]],[[],[[3,[1]]]],[[[10,[1,13]],14],[[15,[13]]]],[[[12,[1,13]],14],[[15,[13]]]],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[[[10,[[0,[7,7]],[0,[7,8,9]]]],10],17],[[[11,[7,7]],11],17],[[[4,[7,7]],4],17],[[[2,[7,7]],2],17],[[[3,[7,7]],3],17],[[[12,[[0,[7,7]],[0,[7,8,9]]]],12],17],[[11,18],19],[[2,18],19],[[11,18],19],[[2,18],19],[[20,21],22],[[20,21],22],[[[10,[[0,[23,7]],[0,[23,8,9]]]],21],22],[[[11,[23,23]],21],22],[[[4,[23,23]],21],22],[[[2,[23,23]],21],22],[[[3,[23,23]],21],22],[[[12,[[0,[23,7]],[0,[23,8,9]]]],21],22],[24,20],[25,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[1]]]],[[],[[3,[1]]]],[[],[[4,[1,13]]]],[[],[[3,[1,13]]]],[18,18],[14],[18],[[[14,[26]]],[[18,[[14,[26]]]]]],[18,18],[18],[[[14,[26]]],[[18,[[14,[26]]]]]],[14],[[[10,[1,13]],14,15]],[[[12,[1,13]],14,15]],[27],[20,[[29,[28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[[11,[1]]],1],[[[4,[1]],1],[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"Float"],[3,"MultinomialNbValidParams"],[3,"MultinomialNbParams"],[3,"GaussianNbParams"],[4,"Result"],[8,"Clone"],[8,"PartialEq"],[8,"Eq"],[8,"Hash"],[3,"GaussianNb"],[3,"GaussianNbValidParams"],[3,"MultinomialNb"],[8,"Label"],[3,"ArrayBase"],[6,"Array1"],[15,"usize"],[15,"bool"],[3,"DatasetBase"],[6,"Result"],[4,"NaiveBayesError"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"MinMaxError"],[4,"Error"],[3,"Dim"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"linfa_clustering":{"doc":"<code>linfa-clustering</code> aims to provide pure Rust implementations â€¦","t":[3,3,4,3,3,3,4,3,13,13,3,4,4,4,3,3,4,13,13,13,13,13,3,13,4,13,4,13,3,4,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,4,3,3,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AppxDbscan","AppxDbscanParams","AppxDbscanParamsError","AppxDbscanValidParams","Dbscan","DbscanParams","DbscanParamsError","DbscanValidParams","EmptyCluster","Full","GaussianMixtureModel","GmmCovarType","GmmError","GmmInitMethod","GmmParams","GmmValidParams","IncrKMeansError","InertiaError","InvalidParams","InvalidParams","InvalidValue","InvalidValue","KMeans","KMeans","KMeansError","KMeansError","KMeansInit","KMeansPara","KMeansParams","KMeansParamsError","KMeansPlusPlus","KMeansValidParams","LinalgError","LinfaError","LinfaError","LinfaError","LowerBoundError","MaxIterations","MinMaxError","MinPoints","MinPoints","NClusters","NRuns","NotConverged","NotConverged","Optics","OpticsAnalysis","OpticsError","OpticsParams","OpticsValidParams","Precomputed","Random","Random","Sample","Slack","Tolerance","Tolerance","Tolerance","appx_tolerance","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","centroids","centroids","check","check","check","check","check","check_ref","check_ref","check_ref","check_ref","check_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster_count","cmp","core_distance","covariance_type","covariance_type","covariances","default_target","default_target","default_target","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dist_fn","dist_fn","dist_fn","dist_fn","dist_fn","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fit","fit","fit_with","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","index","index","inertia","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_method","init_method","init_method","init_method","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iter","max_n_iterations","max_n_iterations","max_n_iterations","max_n_iterations","means","minimum_points","minimum_points","minimum_points","n_clusters","n_clusters","n_runs","n_runs","n_runs","n_runs","new","new","new","new_with_rng","nn_algo","nn_algo","nn_algo","nn_algo","nn_algo","nn_algo","params","params","params","params","params","params_with","params_with","params_with","params_with","params_with_rng","params_with_rng","partial_cmp","precisions","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","provide","provide","provide","provide","provide","provide","provide","reachability_distance","reg_covariance","reg_covariance","rng","rng","slack","slack","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","tolerance","transform","transform","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","with_rng"],"q":["linfa_clusteringd":["DBSCAN (Density-based Spatial Clustering of Applications â€¦","Helper struct for building a set of Approximated DBSCAN â€¦","","The set of hyperparameters that can be specified for the â€¦","DBSCAN (Density-based Spatial Clustering of Applications â€¦","Helper struct for building a set of DBSCAN hyperparameters","","The set of hyperparameters that can be specified for the â€¦","When a cluster has no more data point while fitting GMM","each component has its own general covariance matrix","Gaussian Mixture Model (GMM) aims at clustering a dataset â€¦","A specifier for the type of the relation between componentsâ€¦","An error when modeling a GMM algorithm","A specifier for the method used for the initialization of â€¦","The set of hyperparameters that can be specified for the â€¦","The set of hyperparameters that can be specified for the â€¦","","When inertia computation fails","When any of the hyperparameters are set the wrong value","When any of the hyperparameters are set the wrong value","When any of the hyperparameters are set the wrong value","When any of the hyperparameters are set the wrong value","K-means clustering aims to partition a set of unlabeled â€¦","GMM fitting algorithm is initalized with the result of the â€¦","An error when modeling a KMeans algorithm","When initial KMeans fails","Specifies centroid initialization algorithm for KMeans.","K-means|| algorithm, a parallelized version of K-means++. â€¦","An helper struct used to construct a set of valid â€¦","An error when fitting with an invalid hyperparameter","K-means++ algorithm. Using this over random initialization â€¦","The set of hyperparameters that can be specified for the â€¦","Errors encountered during linear algebra operations","","","","When lower bound computation fails","","","","","","","When fitting EM algorithm does not converge","When the distance between the old and new centroids â€¦","OPTICS (Ordering Points To Identify Clustering Structure) â€¦","The analysis from running OPTICS on a dataset, this allows â€¦","An error when performing OPTICS Analysis","","The set of hyperparameters that can be specified for the â€¦","Precomputed list of centroids, represented as an array of â€¦","GMM fitting algorithm is initialized randomly.","Pick random points as centroids.","This struct represents a data point in the dataset with itâ€¦","","","","","Get the approximate tolerance (<code>tolerance * (1 + slack)</code>) â€¦","Extracts a slice containing all samples in the dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the set of centroids as a 2-dimensional matrix with â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of training points belonging to each â€¦","","The distance to the nth closest point where n is the â€¦","","Set the covariance type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distance metric used in the DBSCAN calculation","Set the distance metric","Returns the distance metric","Distance metric to be used for the algorithm","Distance metric to be used for the algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given an input matrix <code>observations</code>, with shape â€¦","Performs a single batch update of the Mini-Batch K-means â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Index of the sample in the dataset.","","Return the sum of distances between each training point â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the method used to initialize the weights, the means â€¦","Cluster initialization strategy","Change the value of <code>init</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over the samples in the dataset","","Set the number of EM iterations to perform.","We exit the training loop when the number of training â€¦","Change the value of <code>max_n_iterations</code>","","Distance between points for them to be considered â€¦","Minimum number of neighboring points a point needs to have â€¦","Minimum number of a points in a neighborhood around a â€¦","","The number of clusters we will be looking for in the â€¦","","Set the number of initializations to perform. The best â€¦","The final results will be the best output of n_runs â€¦","Change the value of <code>n_runs</code>","","<code>new</code> lets us configure our training algorithm parameters:","","","Nearest neighbour algorithm used for range queries","Set the nearest neighbour algorithm to be used","Nearest neighbour algorithm used for range queries","Set the nearest neighbour algorithm to be used","Nearest Neighbour algorithm to use to find the nearest â€¦","Nearest Neighbour algorithm to use to find the nearest â€¦","Configures the hyperparameters with the minimum number of â€¦","Configures the hyperparameters with the minimum number of â€¦","","","Configures the hyperparameters with the minimum number of â€¦","","Configures the hyperparameters with the minimum number of â€¦","","Configures the hyperparameters with the minimum number of â€¦","","","","","","","","","","","","","","Given an input matrix <code>observations</code>, with shape â€¦","Given one input observation, return the index of its â€¦","","","","","","","","The reachability distance of a sample is the distance â€¦","","Non-negative regularization added to the diagonal of â€¦","","Returns the random generator","Minimum number of neighboring points a point needs to have â€¦","Set the slack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distance between points for them to be considered â€¦","Set the tolerance","Nearest neighbour algorithm used for range queries","Set the tolerance","","Set the convergence threshold. EM iterations will stop â€¦","The training is considered complete if the euclidean â€¦","Change the value of <code>tolerance</code>","Two points are considered neighbors if the euclidean â€¦","Distance between points for them to be considered â€¦","","","","","Given an input matrix <code>observations</code>, with shape â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,14,22,0,0,0,0,0,0,0,39,39,41,14,17,0,23,0,14,0,26,0,0,26,0,14,14,39,41,14,46,14,44,45,46,46,14,41,0,0,0,0,0,26,23,26,0,44,44,45,46,2,3,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,4,7,8,11,13,15,16,8,11,13,15,16,18,2,8,20,21,11,4,22,23,24,13,7,25,15,26,27,28,3,29,16,18,2,8,20,21,11,4,22,23,24,13,7,25,15,26,27,28,3,29,16,7,28,28,24,13,4,4,7,7,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,21,11,25,29,16,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,18,2,8,20,21,11,4,22,23,24,13,7,25,15,26,27,28,3,29,16,18,20,22,23,27,28,24,25,25,18,2,8,44,44,20,21,11,45,45,4,14,14,22,23,24,13,7,46,46,39,39,41,41,25,15,26,27,28,3,17,17,29,16,18,2,8,44,20,21,11,45,4,14,14,14,14,14,22,23,24,13,7,46,39,39,39,41,41,41,25,15,26,27,28,3,17,29,16,22,23,28,3,7,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,24,13,25,15,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,3,24,13,25,15,4,2,21,29,24,25,24,13,25,15,13,15,16,13,2,8,21,11,29,16,18,20,4,7,27,18,20,7,27,4,7,28,4,4,4,4,4,7,7,7,7,4,7,7,44,45,14,46,39,41,17,28,24,13,24,25,2,8,14,39,41,18,2,8,20,21,11,4,22,23,24,13,7,25,15,26,27,28,3,29,16,44,45,14,46,39,41,17,2,8,21,11,24,13,25,15,29,16,2,2,21,21,7,29,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,18,2,8,44,20,21,11,45,4,14,22,23,24,13,7,46,39,41,25,15,26,27,28,3,17,29,16,4,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],1],[[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[1]]],5],[[[7,[1,[6,[1]]]]],5],[[[8,[1]]],9],[[[11,[1,[6,[1]],10]]],9],[[[13,[1,12]]],[[9,[14]]]],[[[15,[1,12,[6,[1]]]]],9],[[[16,[1]]],[[9,[17]]]],[[[8,[1]]],9],[[[11,[1,[6,[1]],10]]],9],[[[13,[1,12]]],[[9,[14]]]],[[[15,[1,12,[6,[1]]]]],9],[[[16,[1]]],[[9,[17]]]],[18,18],[[[2,[[0,[19,1]],19]]],[[2,[[0,[19,1]],19]]]],[[[8,[[0,[19,1]],19]]],[[8,[[0,[19,1]],19]]]],[20,20],[[[21,[[0,[19,1]],[0,[19,[6,[[0,[19,1]]]]]],[0,[19,10]]]]],[[21,[[0,[19,1]],[0,[19,[6,[[0,[19,1]]]]]],[0,[19,10]]]]]],[[[11,[[0,[19,1]],[0,[19,[6,[[0,[19,1]]]]]],[0,[19,10]]]]],[[11,[[0,[19,1]],[0,[19,[6,[[0,[19,1]]]]]],[0,[19,10]]]]]],[[[4,[1]]],[[4,[1]]]],[22,22],[23,23],[[[24,[[0,[19,1]],[0,[19,12]]]]],[[24,[[0,[19,1]],[0,[19,12]]]]]],[[[13,[[0,[19,1]],[0,[19,12]]]]],[[13,[[0,[19,1]],[0,[19,12]]]]]],[[[7,[[0,[19,1]],[0,[19,[6,[[0,[19,1]]]]]]]]],[[7,[[0,[19,1]],[0,[19,[6,[[0,[19,1]]]]]]]]]],[[[25,[[0,[19,1]],[0,[19,12]],[0,[19,[6,[[0,[19,1]]]]]]]]],[[25,[[0,[19,1]],[0,[19,12]],[0,[19,[6,[[0,[19,1]]]]]]]]]],[[[15,[[0,[19,1]],[0,[19,12]],[0,[19,[6,[[0,[19,1]]]]]]]]],[[15,[[0,[19,1]],[0,[19,12]],[0,[19,[6,[[0,[19,1]]]]]]]]]],[[[26,[[0,[19,1]]]]],[[26,[[0,[19,1]]]]]],[27,27],[[[28,[19]]],[[28,[19]]]],[[[3,[[0,[19,1]]]]],[[3,[[0,[19,1]]]]]],[[[29,[19,19,19]]],[[29,[19,19,19]]]],[[[16,[19,19,19]]],[[16,[19,19,19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[1,[6,[1]]]]],30],[[[28,[1]],[28,[1]]],31],[[[28,[1]]],32],[[[24,[1,[0,[12,19]]]]],22],[[[13,[1,[0,[12,19]]]],22],[[13,[1,[0,[12,19]]]]]],[[[4,[1]]],33],[[[4,[1]],34],[[30,[35]]]],[[[7,[1,[6,[1]]]],34],35],[[[7,[1,[6,[1]]]],34],[[30,[35]]]],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[[[21,[1,[6,[1]],10]]]],[[[11,[1,[6,[1]],10]],[6,[1]]],[[11,[1,[6,[1]],10]]]],[[[25,[1,12,[6,[1]]]]]],[[[29,[1]]]],[[[16,[1]]],[[16,[1]]]],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[35],[[18,18],36],[[[2,[[0,[37,1]],37]],2],36],[[[8,[[0,[37,1]],37]],8],36],[[20,20],36],[[[21,[[0,[37,1]],[0,[37,[6,[[0,[37,1]]]]]],[0,[37,10]]]],21],36],[[[11,[[0,[37,1]],[0,[37,[6,[[0,[37,1]]]]]],[0,[37,10]]]],11],36],[[[4,[[0,[37,1]]]],4],36],[[22,22],36],[[23,23],36],[[[24,[[0,[37,1]],[0,[37,12]]]],24],36],[[[13,[[0,[37,1]],[0,[37,12]]]],13],36],[[[7,[[0,[37,1]],[0,[37,[6,[[0,[37,1]]]]]]]],7],36],[[[25,[[0,[37,1]],[0,[37,12]],[0,[37,[6,[[0,[37,1]]]]]]]],25],36],[[[15,[[0,[37,1]],[0,[37,12]],[0,[37,[6,[[0,[37,1]]]]]]]],15],36],[[[26,[[0,[37,1]]]],26],36],[[27,27],36],[[[28,[1]],[28,[1]]],36],[[[3,[[0,[37,1]]]],3],36],[[[29,[37,37,37]],29],36],[[[16,[37,37,37]],16],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[24,[1,[0,[12,19]]]],38],[[9,[14]]]],[[[25,[1,[0,[12,19]],[6,[1]]]],38],[[9,[39]]]],[[[25,[[0,[1,40]],[0,[12,19]],[0,[[6,[[0,[1,40]]]],40]]]],38],[[9,[41]]]],[[18,42],43],[[[2,[[0,[40,1]],40]],42],43],[[[8,[[0,[40,1]],40]],42],43],[[44,42],43],[[44,42],43],[[20,42],43],[[[21,[[0,[40,1]],[0,[40,[6,[[0,[40,1]]]]]],[0,[40,10]]]],42],43],[[[11,[[0,[40,1]],[0,[40,[6,[[0,[40,1]]]]]],[0,[40,10]]]],42],43],[[45,42],43],[[45,42],43],[[[4,[[0,[40,1]]]],42],43],[[14,42],43],[[14,42],43],[[22,42],43],[[23,42],43],[[[24,[[0,[40,1]],[0,[40,12]]]],42],43],[[[13,[[0,[40,1]],[0,[40,12]]]],42],43],[[[7,[[0,[40,1]],[0,[40,[6,[[0,[40,1]]]]]]]],42],43],[[46,42],43],[[46,42],43],[[39,42],43],[[39,42],43],[[[41,[[0,[40,40]]]],42],43],[[[41,[40]],42],43],[[[25,[[0,[40,1]],[0,[40,12]],[0,[40,[6,[[0,[40,1]]]]]]]],42],43],[[[15,[[0,[40,1]],[0,[40,12]],[0,[40,[6,[[0,[40,1]]]]]]]],42],43],[[[26,[[0,[40,1]]]],42],43],[[27,42],43],[[[28,[40]],42],43],[[[3,[[0,[40,1]]]],42],43],[[17,42],43],[[17,42],43],[[[29,[40,40,40]],42],43],[[[16,[40,40,40]],42],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,14],[48,14],[[]],[49,14],[39,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,39],[46,39],[47,[[41,[40]]]],[46,[[41,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[23],[[[28,[1]]],35],[[[3,[1]]]],[[[7,[1,[6,[1]]]]],1],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[[24,[1,[0,[12,19]]]]],23],[[[13,[1,[0,[12,19]]]],23],[[13,[1,[0,[12,19]]]]]],[[[25,[1,12,[6,[1]]]]],26],[[[15,[1,12,[6,[1]]]],[26,[1]]],[[15,[1,12,[6,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1]]],[[50,[[28,[1]]]]]],[[[24,[1,[0,[12,19]]]]],51],[[[13,[1,[0,[12,19]]]],51],[[13,[1,[0,[12,19]]]]]],[[[25,[1,12,[6,[1]]]]],51],[[[15,[1,12,[6,[1]]]],51],[[15,[1,12,[6,[1]]]]]],[[[4,[1]]],5],[[[2,[1]]],35],[[[21,[1,[6,[1]],10]]],35],[[[29,[1]]],35],[[[24,[1,[0,[12,19]]]]],35],[[[25,[1,12,[6,[1]]]]],35],[[[24,[1,[0,[12,19]]]]],51],[[[13,[1,[0,[12,19]]]],51],[[13,[1,[0,[12,19]]]]]],[[[25,[1,12,[6,[1]]]]],35],[[[15,[1,12,[6,[1]]]],35],[[15,[1,12,[6,[1]]]]]],[35,[[13,[1,52]]]],[[35,12,[6,[1]]],[[15,[1,12,[6,[1]]]]]],[35,[[16,[1]]]],[[35,[0,[12,19]]],[[13,[1,[0,[12,19]]]]]],[[[2,[1]]]],[[[8,[1]]],[[8,[1]]]],[[[21,[1,[6,[1]],10]]]],[[[11,[1,[6,[1]],10]],10],[[11,[1,[6,[1]],10]]]],[[[29,[1]]]],[[[16,[1]]],[[16,[1]]]],[35,[[8,[1,53]]]],[35,[[11,[1,54,53]]]],[35,[[13,[1,52]]]],[35,[[15,[1,52,54]]]],[35,[[16,[1,54,53]]]],[35,[[8,[1]]]],[[35,[6,[1]],10],[[11,[1,[6,[1]],10]]]],[[35,12,[6,[1]]],[[15,[1,12,[6,[1]]]]]],[[35,[6,[1]],10],[[16,[1,[6,[1]],10]]]],[[35,[0,[12,19]]],[[13,[1,[0,[12,19]]]]]],[[35,12],[[15,[1,12,54]]]],[[[28,[1]],[28,[1]]],[[32,[31]]]],[[[4,[1]]],33],[34],[38],[[[34,[55]]],[[38,[[34,[55]]]]]],[38,38],[38,38],[38],[[[34,[55]]],[[38,[[34,[55]]]]]],[34],[[[4,[1]],34,30]],[[[7,[1,[6,[1]]]],34,30]],[[[7,[1,[6,[1]]]],34,35]],[56],[56],[56],[56],[56],[56],[56],[[[28,[1]]],32],[[[24,[1,[0,[12,19]]]]],1],[[[13,[1,[0,[12,19]]]],1],[[13,[1,[0,[12,19]]]]]],[[[24,[1,[0,[12,19]]]]],[[0,[12,19]]]],[[[25,[1,12,[6,[1]]]]]],[[[2,[1]]],1],[[[8,[1]],1],[[8,[1]]]],[14,[[32,[57]]]],[39,[[32,[57]]]],[[[41,[40]]],[[32,[57]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[],58],[[[2,[1]]],1],[[[8,[1]],1],[[8,[1]]]],[[[21,[1,[6,[1]],10]]],1],[[[11,[1,[6,[1]],10]],1],[[11,[1,[6,[1]],10]]]],[[[24,[1,[0,[12,19]]]]],1],[[[13,[1,[0,[12,19]]]],1],[[13,[1,[0,[12,19]]]]]],[[[25,[1,12,[6,[1]]]]],1],[[[15,[1,12,[6,[1]]]],1],[[15,[1,12,[6,[1]]]]]],[[[29,[1]]],1],[[[16,[1]],1],[[16,[1]]]],[[[2,[1,10]],[38,[[34,[59,60]]]]],[[38,[[34,[59,60]],[30,[[32,[35]]]]]]]],[[[2,[1,10]],34],[[30,[[32,[35]]]]]],[[[21,[1,[6,[1]],10]],[38,[[34,[59,60]]]]],[[38,[[34,[59,60]],[30,[[32,[35]]]]]]]],[[[21,[1,[6,[1]],10]],34],[[30,[[32,[35]]]]]],[[[7,[1,[6,[1]]]],34],[[30,[1]]]],[[[29,[1,[6,[1]],10]],[61,[1,60]]],[[3,[1]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[1]]],30],[[[13,[1,[0,[12,19]]]],[0,[12,19]]],[[13,[1,[0,[12,19]]]]]]],"p":[[8,"Float"],[3,"AppxDbscanValidParams"],[3,"OpticsAnalysis"],[3,"GaussianMixtureModel"],[6,"Array2"],[8,"Distance"],[3,"KMeans"],[3,"AppxDbscanParams"],[4,"Result"],[8,"NearestNeighbour"],[3,"DbscanParams"],[8,"Rng"],[3,"GmmParams"],[4,"GmmError"],[3,"KMeansParams"],[3,"OpticsParams"],[4,"OpticsError"],[3,"AppxDbscan"],[8,"Clone"],[3,"Dbscan"],[3,"DbscanValidParams"],[4,"GmmCovarType"],[4,"GmmInitMethod"],[3,"GmmValidParams"],[3,"KMeansValidParams"],[4,"KMeansInit"],[3,"Optics"],[3,"Sample"],[3,"OpticsValidParams"],[6,"Array1"],[4,"Ordering"],[4,"Option"],[6,"Array3"],[3,"ArrayBase"],[15,"usize"],[15,"bool"],[8,"PartialEq"],[3,"DatasetBase"],[4,"KMeansError"],[8,"Debug"],[4,"IncrKMeansError"],[3,"Formatter"],[6,"Result"],[4,"AppxDbscanParamsError"],[4,"DbscanParamsError"],[4,"KMeansParamsError"],[4,"Error"],[4,"MinMaxError"],[4,"LinalgError"],[3,"Iter"],[15,"u64"],[3,"Xoshiro256Plus"],[4,"CommonNearestNeighbour"],[3,"L2Dist"],[3,"Dim"],[3,"Demand"],[8,"Error"],[3,"String"],[8,"Data"],[6,"Ix2"],[6,"ArrayView"],[3,"TypeId"]]},\
"linfa_datasets":{"doc":"Datasets","t":[0,0,5,5,5,5,5,5,5,5,5],"n":["dataset","generate","array_from_csv","array_from_gz_csv","diabetes","iris","linnerud","winequality","blobs","blobs_with_distribution","make_dataset"],"q":["linfa_datasets","","linfa_datasets::dataset","","","","","","linfa_datasets::generate","",""],"d":["","Utility functions for randomly generating datasets","Convert CSV bytes into 2D array","Convert Gzipped CSV bytes into 2D array","Read in the diabetes dataset from dataset path","Read in the iris-flower dataset from dataset path.","Read in the physical exercise dataset from dataset path.","Read in the winequality dataset from dataset path","Special case of <code>blobs_with_distribution</code> with a standard â€¦","Given an input matrix <code>blob_centroids</code>, with shape â€¦","Generates a random Linfa::Dataset (ds). The ds values are â€¦"],"i":[0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[1,2,3],[[7,[[5,[4]],6]]]],[[1,2,3],[[7,[[5,[4]],6]]]],[[],[[9,[4,4,8]]]],[[],[[9,[4,10,8]]]],[[],[[9,[4,4]]]],[[],[[9,[4,10,8]]]],[[10,11],[[5,[4]]]],[[10,11,[0,[[12,[4]],13]]],[[5,[4]]]],[[10,10,10],[[9,[4,4]]]]],"p":[[8,"Read"],[15,"bool"],[15,"u8"],[15,"f64"],[6,"Array2"],[4,"ReadError"],[4,"Result"],[6,"Ix1"],[6,"Dataset"],[15,"usize"],[3,"ArrayBase"],[8,"Distribution"],[8,"Clone"]]},\
"linfa_elasticnet":{"doc":"Elastic Net","t":[13,3,4,6,3,6,3,13,13,13,13,13,3,6,6,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BaseCrate","ElasticNet","ElasticNetError","ElasticNetParams","ElasticNetParamsBase","ElasticNetValidParams","ElasticNetValidParamsBase","IllConditioned","IncorrectTargetShape","InvalidL1Ratio","InvalidPenalty","InvalidTolerance","MultiTaskElasticNet","MultiTaskElasticNetParams","MultiTaskElasticNetValidParams","NotEnoughSamples","Result","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","confidence_95th","confidence_95th","default","default_target","default_target","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","duality_gap","duality_gap","eq","eq","equivalent","equivalent","fit","fit","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hyperplane","hyperplane","init","init","init","init","init","intercept","intercept","into","into","into","into","into","l1_ratio","l1_ratio","lasso","lasso","max_iterations","max_iterations","n_steps","n_steps","new","params","params","penalty","penalty","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","provide","ridge","ridge","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tolerance","tolerance","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_intercept","with_intercept","z_score","z_score"],"q":["linfa_elasticnet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Elastic Net model","Error variants from hyperparameter construction or model â€¦","A hyper-parameter set for Elastic-Net","","A verified hyper-parameter set ready for the estimation of â€¦","","The input is singular","","","","","MultiTask Elastic Net model","A hyper-parameter set for multi-task Elastic-Net","A verified hyper-parameter set ready for the estimation of â€¦","The input has not enough samples","Simplified <code>Result</code> using <code>ElasticNetError</code> as error type","","","","","","","","","","","","Validate the hyper parameters","","","","","","","","","","","Calculate the confidence level","Calculate the confidence level","","","","","","","","","","","","","","","","","","","Get the duality gap at the end of the optimization â€¦","Get the duality gap at the end of the optimization â€¦","","","","","Fit an elastic net model given a feature matrix <code>x</code> and a â€¦","Fit a multi-task Elastic Net model given a feature matrix <code>x</code>â€¦","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the fitted hyperplane","Get the fitted hyperplane","","","","","","Get the fitted intercept, 0. if no intercept was fitted","Get the fitted intercept, [0., â€¦, 0.] if no intercept â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set l1_ratio parameter of the elastic net. Controls how â€¦","Create a LASSO only model","Create a multi-task Lasso only model","","Set the maximum number of iterations for the optimization â€¦","Get the number of steps taken in optimization algorithm","Get the number of steps taken in optimization algorithm","Create default elastic net hyper parameters","Create a default parameter set for construction of â€¦","","","Set the overall parameter penalty parameter of the elastic â€¦","","","","","","","","","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","","Create a ridge only model","Create a multi-task ridge only model","","","","","","","","","Set the tolerance which is the minimum absolute change in â€¦","","","","","","","","","","","","","","","","","","","","","","Configure the elastic net model to fit an intercept. â€¦","Calculate the Z score","Calculate the Z score"],"i":[4,0,0,0,0,0,0,4,4,4,4,4,0,0,0,4,0,4,6,2,7,8,4,6,2,7,8,2,2,4,6,2,7,8,4,6,2,7,8,7,8,2,7,8,4,6,2,7,8,4,6,2,7,8,4,6,2,7,8,7,8,6,2,6,2,15,17,4,4,6,2,7,8,4,4,6,2,7,8,7,8,4,6,2,7,8,7,8,4,6,2,7,8,6,2,7,8,6,2,7,8,2,7,8,6,2,7,7,7,7,8,8,8,8,7,8,4,7,8,4,4,6,2,7,8,4,6,2,4,6,2,7,8,4,6,2,7,8,4,6,2,7,8,4,6,2,7,8,6,2,7,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],3],[4,4],[[[6,[5]]],[[6,[5]]]],[[[2,[5]]],[[2,[5]]]],[[[7,[5]]],[[7,[5]]]],[[[8,[5]]],[[8,[5]]]],[[]],[[]],[[]],[[]],[[]],[[[7,[1]]],[[3,[9]]]],[[[8,[1]]],[[3,[10]]]],[[],[[2,[1]]]],[[[7,[1]],11],[[9,[1]]]],[[[8,[1]],11],[[10,[1]]]],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[[7,[1]]],1],[[[8,[1]]],1],[[[6,[13]],6],14],[[[2,[13]],2],14],[[],14],[[],14],[[15,16],3],[[17,16],3],[[4,18],19],[[4,18],19],[[[6,[20]],18],19],[[[2,[20]],18],19],[[[7,[20]],18],19],[[[8,[20]],18],19],[21,4],[[]],[[]],[[]],[[]],[[]],[[[7,[1]]],9],[[[8,[1]]],10],[[],12],[[],12],[[],12],[[],12],[[],12],[[[7,[1]]],1],[[[8,[1]]],9],[[]],[[]],[[]],[[]],[[]],[[[6,[1]]],1],[[[2,[1]],1],[[2,[1]]]],[[],[[22,[1]]]],[[],[[23,[1]]]],[[[6,[1]]],24],[[[2,[1]],24],[[2,[1]]]],[[[7,[1]]],24],[[[8,[1]]],24],[[],[[2,[1]]]],[[],[[22,[1]]]],[[],[[23,[1]]]],[[[6,[1]]],1],[[[2,[1]],1],[[2,[1]]]],[[[11,[25]]],[[16,[[11,[25]]]]]],[16,16],[16],[11],[16,16],[11],[[[11,[25]]],[[16,[[11,[25]]]]]],[16],[[[7,[1]],11,9]],[[[8,[1]],11,10]],[26],[[],[[22,[1]]]],[[],[[23,[1]]]],[4,[[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[[],29],[[[6,[1]]],1],[[[2,[1]],1],[[2,[1]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[[6,[1]]],14],[[[2,[1]],14],[[2,[1]]]],[[[7,[1]]],[[3,[[9,[1]]]]]],[[[8,[1]]],[[3,[[10,[1]]]]]]],"p":[[8,"Float"],[3,"ElasticNetParamsBase"],[6,"Result"],[4,"ElasticNetError"],[8,"Clone"],[3,"ElasticNetValidParamsBase"],[3,"ElasticNet"],[3,"MultiTaskElasticNet"],[6,"Array1"],[6,"Array2"],[3,"ArrayBase"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[6,"ElasticNetValidParams"],[3,"DatasetBase"],[6,"MultiTaskElasticNetValidParams"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Error"],[6,"ElasticNetParams"],[6,"MultiTaskElasticNetParams"],[15,"u32"],[3,"Dim"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"linfa_ftrl":{"doc":"Follow the regularized leader","t":[3,4,3,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Ftrl","FtrlError","FtrlParams","InvalidAlpha","InvalidBeta","InvalidL1Ratio","InvalidL2Ratio","InvalidNFeatures","LinfaError","Result","alpha","alpha","beta","beta","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone_into","clone_into","default_target","default_with_rng","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","get_weights","init","init","init","into","into","into","l1_ratio","l1_ratio","l2_ratio","l2_ratio","n","new","new","params","params_with_rng","predict","predict","predict","predict","predict_inplace","provide","rng","serialize","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","vzip","vzip","vzip","z"],"q":["linfa_ftrl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Simplified <code>Result</code> using <code>FtrlError</code> as error type","Set the learning rate.","Get the alpha parameter","Set the beta parameter.","Get the beta parameter","","","","","","","","Validate the hyper parameters","","","","","","Create new hyperparameters with pre-defined random number â€¦","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calculate weights for model prediction","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set l1_ratio parameter. Controls how the parameter","Get the L1 regularization value","Set l2_ratio parameter. Controls how the parameter penalty â€¦","Get the L2 regularization value","Get N values","Create new hyperparameters with pre-defined values","Create a new model with given parameters, number of â€¦","Create a default parameter set for construction of Follow â€¦","Create default hyperparameters with custom random number â€¦","","","","","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","","Set random number generator. Used to initialize Z values","","","","","","","","","","","","","","","","Update method of the model hyperparameters in case of â€¦","","","","Get Z values"],"i":[0,0,0,13,13,13,13,13,13,0,3,4,3,4,13,3,4,13,3,4,3,3,3,4,3,4,4,3,13,3,4,13,3,4,3,4,13,3,4,3,13,13,3,4,13,13,3,4,4,13,3,4,13,3,4,3,4,3,4,4,3,4,4,4,4,4,4,4,4,13,3,3,4,13,3,4,13,13,3,4,13,3,4,13,3,4,4,13,3,4,4],"f":[0,0,0,0,0,0,0,0,0,0,[[[3,[1,2]],1],[[3,[1,2]]]],[[[4,[1]]],1],[[[3,[1,2]],1],[[3,[1,2]]]],[[[4,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]],5],[[[3,[1,2]]],5],[[[3,[[0,[6,1]],[0,[6,2]]]]],[[3,[[0,[6,1]],[0,[6,2]]]]]],[[[4,[[0,[6,1]]]]],[[4,[[0,[6,1]]]]]],[[]],[[]],[[[4,[1]],7],[[9,[8]]]],[2,[[3,[1,2]]]],[10],[10],[10],[10],[10],[10],[[],[[5,[3]]]],[[],[[5,[4]]]],[10],[10],[10],[[[3,[[0,[11,1]],[0,[11,2]]]],3],12],[[13,14],15],[[13,14],15],[[[3,[[0,[16,1]],[0,[16,2]]]],14],15],[[[4,[[0,[16,1]]]],14],15],[17,13],[[]],[[]],[[]],[[[4,[1]]],[[9,[1]]]],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[[3,[1,2]],1],[[3,[1,2]]]],[[[4,[1]]],1],[[[3,[1,2]],1],[[3,[1,2]]]],[[[4,[1]]],1],[[[4,[1]]],9],[[1,1,1,1,2],[[3,[1,2]]]],[[[0,[1,[0,[2,6]]]],10],[[4,[1]]]],[[],[[3,[1,18]]]],[2,[[3,[1,2]]]],[19],[19,19],[7],[[[7,[20]]],[[19,[[7,[20]]]]]],[[[4,[1]],7,9]],[21],[[[3,[1,2]],2],[[3,[1,2]]]],[3,5],[4,5],[13,[[23,[22]]]],[[]],[[]],[[],24],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],25],[[],25],[[],25],[[[4,[1]],19,[26,[8]]]],[[]],[[]],[[]],[[[4,[1]]],9]],"p":[[8,"Float"],[8,"Rng"],[3,"FtrlParams"],[3,"Ftrl"],[4,"Result"],[8,"Clone"],[3,"ArrayBase"],[3,"Pr"],[6,"Array1"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[4,"FtrlError"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Error"],[3,"Xoshiro256Plus"],[3,"DatasetBase"],[3,"Dim"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[6,"ArrayView1"]]},\
"linfa_hierarchical":{"doc":"Hierarchical Clustering","t":[13,13,13,13,4,13,3,4,13,13,4,13,6,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Average","BaseCrate","Centroid","Complete","Criterion","Distance","HierarchicalCluster","HierarchicalError","InvalidStoppingCondition","Median","Method","NumClusters","Result","Single","ValidHierarchicalCluster","Ward","Weighted","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","init","init","init","init","init","into","into","into","into","into","into_method_chain","max_distance","mul_acc","num_clusters","provide","source","to_owned","to_owned","to_owned","to_owned","to_string","transform","transform","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_method"],"q":["linfa_hierarchical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Assigns the average dissimilarity between all pairs of â€¦","","Assigns the centroid dissimilarity between clusters.","Assigns the maximum dissimilarity between all pairs of â€¦","Criterion when to stop merging","","Agglomerative hierarchical clustering","Error variants from parameter construction","Invalid stopping condition","Assigns the median dissimilarity between clusters.","A method for computing the dissimilarities between â€¦","","Simplified <code>Result</code> using <code>HierarchicalError</code> as error type","Assigns the minimum dissimilarity between all pairs of â€¦","Checked version of <code>HierarchicalCluster</code>","Assigns the Ward dissimilarity between clusters.","Assigns the weighted dissimilarity between clusters.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this linkage method into a nearest neighbor chain â€¦","Stop merging when a certain distance is reached","","Stop merging when a certain number of clusters are reached","","","","","","","","Perform hierarchical clustering of a similarity matrix","Perform hierarchical clustering of a similarity matrix","","","","","","","","","","","","","","","","","","","","","Select a merging method"],"i":[7,13,7,7,0,5,0,0,13,7,0,5,0,7,0,7,7,13,5,2,6,7,13,5,2,6,7,2,2,5,2,6,7,5,2,6,7,2,6,13,5,2,6,7,13,5,2,6,7,13,5,2,6,7,5,2,6,7,7,13,13,5,2,6,7,13,13,5,2,6,7,7,13,5,2,6,7,13,5,2,6,7,7,2,7,2,13,13,5,2,6,7,13,6,6,13,5,2,6,7,13,5,2,6,7,13,5,2,6,7,13,5,2,6,7,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],3],[[[5,[[0,[4,1]]]]],[[5,[[0,[4,1]]]]]],[[[2,[[0,[4,1]]]]],[[2,[[0,[4,1]]]]]],[[[6,[[0,[4,1]]]]],[[6,[[0,[4,1]]]]]],[7,7],[[]],[[]],[[]],[[]],[[],[[2,[[0,[8,1]]]]]],[[],[[6,[1]]]],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[[5,[[0,[10,1]]]],5],11],[[[2,[[0,[10,1]]]],2],11],[[[6,[[0,[10,1]]]],6],11],[[7,7],11],[[],11],[[[13,[[0,[12,1]]]],14],15],[[[13,[1]],14],15],[[[5,[[0,[12,1]]]],14],15],[[[2,[[0,[12,1]]]],14],15],[[[6,[[0,[12,1]]]],14],15],[[7,14],[[3,[16]]]],[17,[[13,[1]]]],[[]],[[]],[[]],[[]],[[]],[18,[[3,[7,19]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[7,[[21,[20]]]],[[[2,[1]],1],[[2,[1]]]],[[]],[[[2,[1]],9],[[2,[1]]]],[22],[[[13,[1]]],[[21,[23]]]],[[]],[[]],[[]],[[]],[[],24],[[[6,[1]],[26,[[25,[1]]]]],[[26,[[25,[1]],[27,[9]]]]]],[[[6,[1]],[25,[1]]],[[26,[[25,[1]],[27,[9]]]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],7],[[2,[1]]]]],"p":[[8,"Float"],[3,"HierarchicalCluster"],[4,"Result"],[8,"Clone"],[4,"Criterion"],[3,"ValidHierarchicalCluster"],[4,"Method"],[8,"Default"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[4,"HierarchicalError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Error"],[15,"str"],[4,"Error"],[4,"MethodChain"],[4,"Option"],[3,"Demand"],[8,"Error"],[3,"String"],[6,"Kernel"],[3,"DatasetBase"],[3,"Vec"],[3,"TypeId"]]},\
"linfa_ica":{"doc":"Independent Component Analysis (ICA)","t":[0,0,0,4,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","fast_ica","hyperparams","FastIcaError","InvalidTolerance","InvalidValue","LinalgError","LinfaError","NotEnoughSamples","Result","SvdDecomposition","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","Cube","Exp","FastIca","GFunc","Logcosh","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_target","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","init","init","into","into","params","predict","predict","predict","predict","predict_inplace","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FastIcaParams","FastIcaValidParams","borrow","borrow","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fit","fmt","fmt","from","from","gfunc","gfunc","init","init","into","into","max_iter","max_iter","ncomponents","ncomponents","new","random_state","random_state","to_owned","to_owned","tol","tol","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["linfa_ica","","","linfa_ica::error","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_ica::fast_ica","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_ica::hyperparams","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Fast algorithm for Independent Component Analysis (ICA)","","An error when modeling FastICA algorithm","","When any of the hyperparameters are set the wrong value","Errors encountered during linear algebra operations","","When there are no samples in the provided dataset","","If we fail to compute any components of the SVD â€¦","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Fitted FastICA model for recovering the sources","Some standard non-linear functions","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Recover the sources","","","","","","","","","","","","Fast Independent Component Analysis (ICA)","","","","","","","","","","","","","","","","","","","","Fit the model","","","Returns the argument unchanged.","Returns the argument unchanged.","","G function used in the approximation to neg-entropy, refer â€¦","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set maximum number of iterations during fit","","Set the number of components to use, if not set all are â€¦","Create new FastICA algorithm with default values for its â€¦","","Set seed for random number generator for reproducible â€¦","","","","Set tolerance on upate at each iteration","","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,15,0,0,15,14,15,14,15,14,15,14,15,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,14,14,14,14,15,14,15,14,15,14,15,14,15,0,0,25,21,25,21,21,21,25,21,25,21,21,25,21,25,21,25,21,25,21,25,25,21,25,21,25,21,25,21,25,21,25,21,25,21,21,25,21,25,21,25,21,25,21,25,21,25,21,25,21],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[1],[1],[[2,3],4],[[2,3],4],[[]],[5,2],[6,2],[[],1],[[]],[7],[2,[[9,[8]]]],[[],10],[[],11],[[],11],[[],12],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[15,15],[[]],[[]],[[[14,[16]],17],[[17,[16]]]],[1],[1],[1],[1],[1],[1],[[[14,[18]],14],19],[[15,15],19],[[[14,[20]],3],4],[[15,3],4],[[]],[[]],[[],1],[[],1],[[]],[[]],[[],[[21,[16]]]],[22],[[[22,[23]]],[[24,[[22,[23]]]]]],[24,24],[24],[[[14,[16]],17,17]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[[21,[16]]],11],[[[21,[16]]],11],[[[25,[[0,[13,16]]]]],[[25,[[0,[13,16]]]]]],[[[21,[[0,[13,16]]]]],[[21,[[0,[13,16]]]]]],[[]],[[]],[[],[[21,[16]]]],[1],[1],[1],[1],[1],[1],[[[25,[[0,[18,16]]]],25],19],[[[21,[[0,[18,16]]]],21],19],[[[25,[16]],24],26],[[[25,[[0,[20,16]]]],3],4],[[[21,[[0,[20,16]]]],3],4],[[]],[[]],[[[25,[16]]],15],[[[21,[16]],15],[[21,[16]]]],[[],1],[[],1],[[]],[[]],[[[25,[16]]],1],[[[21,[16]],1],[[21,[16]]]],[[[25,[16]]],9],[[[21,[16]],1],[[21,[16]]]],[[],[[21,[16]]]],[[[25,[16]]],9],[[[21,[16]],1],[[21,[16]]]],[[]],[[]],[[[25,[16]]],16],[[[21,[16]],16],[[21,[16]]]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]]],"p":[[15,"usize"],[4,"FastIcaError"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"LinalgError"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"FastIca"],[4,"GFunc"],[8,"Float"],[6,"Array2"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"FastIcaParams"],[3,"ArrayBase"],[3,"Dim"],[3,"DatasetBase"],[3,"FastIcaValidParams"],[6,"Result"]]},\
"linfa_kernel":{"doc":"Kernel methods","t":[13,13,2,6,3,2,4,3,4,6,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,16,8,4,13,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,10,10,10,11,10,11,11,11,11],"n":["Dense","Gaussian","Inner","Kernel","KernelBase","KernelInner","KernelMethod","KernelParams","KernelType","KernelView","Linear","Polynomial","Sparse","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","column","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","diagonal","distance","dot","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","init","init","init","init","inner","inner","into","into","into","into","is_linear","is_linear","kind","method","method","new","new","nfeatures","nn_algo","nsamples","params","params_with_nn","size","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_triangle","transform","transform","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","view","view","vzip","vzip","vzip","vzip","Dense","Elem","Inner","KernelInner","Sparse","borrow","borrow_mut","clone","clone_into","column","deref","deref_mut","diagonal","dot","drop","eq","fmt","from","init","into","is_dense","size","sum","to_owned","to_upper_triangle","try_from","try_into","type_id","vzip"],"q":["linfa_kernel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_kernel::inner","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Gaussian(eps): exp(-norm(x - xâ€™)/eps)","","Type definition of Kernel that owns its inner matrix","A generic kernel","","The inner product definition used by a kernel.","Defines the set of parameters needed to build a kernel","Kernel representation, can be either dense or sparse","Type definition of Kernel that borrows its inner matrix","Euclidean inner product","Polynomial(constant, degree):  â€¦","A sparse kernel requires to define a number of neighbours â€¦","","","","","","","","","","","","","","","","","Getter for a column of the kernel matrix","","","","","","","","","Getter for the elements in the diagonal of the kernel â€¦","","Performs the matrix product between the kernel matrix and â€¦","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the kernel is a linear kernel","","Setter for <code>kind</code>, whether to construct a dense or sparse â€¦","Setter for <code>method</code>, the inner product used by the kernel","The inner product that will be used by the kernel","","","","Setter for <code>nn_algo</code>, nearest neighbour algorithm for â€¦","","Generates the default set of parameters for building a â€¦","Generate parameters with a specific nearest neighbour â€¦","Gives the size of the side of the square kernel matrix","Sums all elements in the same row of the kernel matrix","","","","","","","Getter for the data in the upper triangle of the kernel â€¦","Builds a new Dataset with the kernel as the records and â€¦","Builds a kernel from a view of the input data.","Builds a kernel from a view of the input data.","Builds a kernel from a view of the input data.","Builds a new Dataset with the kernel as the records and â€¦","Builds a new Dataset with the kernel as the records and â€¦","","","","","","","","","","","","","Gives a KernelView which has a view on the original kernelâ€¦","Gives a KernelView which has a view on the original kernelâ€¦","","","","","","","Specifies the methods an inner matrix of a kernel must be â€¦","Allows a kernel to have either a dense or a sparse inner â€¦","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[1,5,0,0,0,0,0,0,0,0,5,5,1,1,4,5,6,1,4,5,6,1,4,5,6,1,4,5,6,4,1,4,5,6,1,4,5,6,4,5,4,1,4,5,6,1,4,5,6,1,1,4,5,6,1,4,5,6,1,1,4,5,6,0,4,1,4,5,6,4,5,6,6,4,19,4,4,6,4,4,4,4,4,22,1,4,4,5,6,4,6,6,6,6,6,6,1,4,5,6,1,4,5,6,1,4,5,6,19,4,1,4,5,6,33,3,0,0,33,33,33,33,33,3,33,33,3,3,33,33,33,33,33,33,3,3,3,33,3,33,33,33,33],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[4,[[0,[2,3]],[0,[2,3]]]]],[[4,[[0,[2,3]],[0,[2,3]]]]]],[[[5,[2]]],[[5,[2]]]],[[[6,[2,2]]],[[6,[2,2]]]],[[]],[[]],[[]],[[]],[[[4,[3,3]],7],[[9,[8]]]],[7],[7],[7],[7],[7],[7],[7],[7],[[[4,[3,3]]],[[10,[8]]]],[[[5,[8]],[11,[8]],[11,[8]]],8],[[[4,[3,3]],12],[[13,[8]]]],[7],[7],[7],[7],[[1,1],14],[[[4,[[0,[15,3]],[0,[15,3]]]],4],14],[[[5,[15]],5],14],[[[6,[15,15]],6],14],[[],14],[[1,16],17],[[[4,[[0,[18,3]],[0,[18,3]]]],16],17],[[[5,[18]],16],17],[[[6,[18,18]],16],17],[[]],[[]],[[]],[[]],[1],[[],7],[[],7],[[],7],[[],7],0,0,[[]],[[]],[[]],[[]],[[[4,[3,3]]],14],[[[5,[8]]],14],[[6,1],6],[[6,5],6],0,[[[12,[8]],6],[[19,[8]]]],[[[12,[8]],6],[[19,[8]]]],[[[4,[3,3]]],7],[6,6],[[[4,[3,3]]],7],[[],[[6,[8,20]]]],[21,[[6,[8,21]]]],[[[4,[3,3]]],7],[[[4,[3,3]]],[[10,[8]]]],[[[22,[8]]],[[19,[8]]]],[[]],[[[4,[[25,[23,24]],[26,[8,7,7]]]]],[[19,[8]]]],[[]],[[]],[[]],[[[4,[3,3]]],[[9,[8]]]],[[[6,[8,21]],27],[[27,[[19,[8]]]]]],[[[6,[8,21]],13],[[19,[8]]]],[[[6,[8,21]],[12,[8]]],[[19,[8]]]],[[[6,[8,21]],12],[[19,[8]]]],[[[6,[8,21]],27],[[27,[[19,[8]]]]]],[[[6,[8,21]],[27,[[13,[8]],28]]],[[27,[[19,[8]],28]]]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],30],[[],30],[[],30],[[],30],[[[19,[8]]],[[22,[8]]]],[[[4,[[25,[[31,[8]],24]],[26,[8,7,[9,[7,32]],[9,[7,32]],[9,[8,32]],7]]]]],[[22,[8]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[[33,[[0,[2,3]],[0,[2,3]]]]],[[33,[[0,[2,3]],[0,[2,3]]]]]],[[]],[7,9],[7],[7],[[],10],[12,13],[7],[[[33,[[0,[15,3]],[0,[15,3]]]],33],14],[[[33,[[0,[18,3]],[0,[18,3]]]],16],17],[[]],[[],7],[[]],[[],14],[[],7],[[],10],[[]],[[],9],[[],29],[[],29],[[],30],[[]]],"p":[[4,"KernelType"],[8,"Clone"],[8,"Inner"],[3,"KernelBase"],[4,"KernelMethod"],[3,"KernelParams"],[15,"usize"],[8,"Float"],[3,"Vec"],[6,"Array1"],[6,"ArrayView1"],[6,"ArrayView2"],[6,"Array2"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[6,"Kernel"],[4,"CommonNearestNeighbour"],[8,"NearestNeighbour"],[6,"KernelView"],[3,"ViewRepr"],[3,"Dim"],[3,"ArrayBase"],[3,"CsMatBase"],[3,"DatasetBase"],[8,"AsTargets"],[4,"Result"],[3,"TypeId"],[3,"OwnedRepr"],[3,"Global"],[4,"KernelInner"]]},\
"linfa_linear":{"doc":"<code>linfa-linear</code> aims to provide pure Rust implementations of â€¦","t":[13,13,3,3,8,13,13,13,13,3,13,4,3,4,13,13,13,13,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Argmin","BaseCrate","FittedIsotonicRegression","FittedLinearRegression","Float","Identity","InvalidPenalty","InvalidTargetRange","InvalidTweediePower","IsotonicRegression","LinalgError","LinearError","LinearRegression","Link","Log","Logit","NotEnoughSamples","NotEnoughTargets","Result","TweedieRegressor","TweedieRegressorParams","TweedieRegressorValidParams","alpha","alpha","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coef","default","default","default","default_target","default_target","default_target","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","fit","fit","fit","fit_intercept","fit_intercept","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","init","init","intercept","intercept","into","into","into","into","into","into","into","into","into","inverse","inverse_derviative","link","link","link","link_derivative","max_iter","max_iter","new","new","new","params","params","power","power","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","provide","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tol","tol","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_intercept"],"q":["linfa_lineard":["Errors encountered when using argminâ€™s solver","","A fitted isotonic regression model which can be used for â€¦","A fitted linear regression model which can be used for â€¦","","The identity link function <code>g(x)=x</code>","","","","An isotonic regression model.","","An error when modeling a Linear algorithm","An ordinary least squares linear regression model.","Link functions used by GLM","The log link function <code>g(x)=log(x)</code>","The logit link function <code>g(x)=logit(x)</code>","","","","Generalized Linear Model (GLM) with a Tweedie distribution","The set of hyperparameters that can be specified for the â€¦","The set of hyperparameters that can be specified for the â€¦","","Constant that multiplies with the penalty term and thus â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Estimated coefficients for the linear predictor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fit an isotonic regression model given a feature matrix <code>X</code> â€¦","Fit a linear regression model given a feature matrix <code>X</code> and â€¦","","Specifies whether a bias or intercept should be added to â€¦","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Get the fitted intercept, 0. if no intercept was fitted","Intercept or bias added to the linear model","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the inverse link function <code>h(linear predictor)</code>","Computes the derivative of the inverse link function â€¦","","The link function of the GLM, for mapping from linear â€¦","Compute the link function <code>g(ypred)</code>","Computes the derivative of the link <code>g&#39;(ypred)</code>","","Maximum number of iterations for the LBFGS solver","","Create a default isotonic regression model.","Create a default linear regression model. By default, an â€¦","","Get the fitted parameters","","The power determines the underlying target distribution","","","","","","","","","","","","","Predict the target","Given an input matrix <code>X</code>, with shape <code>(n_samples, 1)</code>, <code>predict</code>â€¦","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","","","","","","","","","","","","","Stopping criterion for the LBFGS solver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configure the linear regression model to fit an intercept."],"i":[21,21,0,0,0,6,21,21,21,0,21,0,0,0,6,6,21,21,0,0,0,0,2,3,21,2,3,6,7,8,9,10,11,21,2,3,6,7,8,9,10,11,3,3,2,3,6,7,8,9,10,11,2,3,6,7,8,9,10,11,7,3,8,10,7,9,11,21,2,3,6,7,8,9,10,11,21,2,3,6,7,8,9,10,11,21,2,3,6,7,8,9,10,11,2,3,6,7,8,9,10,11,6,8,10,2,8,10,2,3,21,21,2,3,6,7,8,9,10,11,21,21,21,21,2,3,6,7,8,9,10,11,6,21,2,3,6,7,8,9,10,11,11,7,21,2,3,6,7,8,9,10,11,6,6,2,3,6,6,2,3,3,8,10,7,11,2,3,7,7,7,7,9,9,9,9,11,11,11,11,7,9,11,21,21,2,3,6,7,8,9,10,11,21,2,3,21,2,3,6,7,8,9,10,11,21,2,3,6,7,8,9,10,11,21,2,3,6,7,8,9,10,11,21,2,3,6,7,8,9,10,11,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],1],[[[3,[1]],1],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1]]],4],[[[3,[1]]],4],[[[2,[5]]],[[2,[5]]]],[[[3,[5]]],[[3,[5]]]],[6,6],[[[7,[5]]],[[7,[5]]]],[8,8],[[[9,[5]]],[[9,[5]]]],[10,10],[[[11,[5]]],[[11,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[3,[1]]]],[[],8],[[],10],[[[7,[0]],12],[[13,[0]]]],[[[9,[14]],12],[[13,[14]]]],[[[11,[1]],12],[[13,[1]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[[2,[16]],2],17],[[[3,[16]],3],17],[[6,6],17],[[[7,[16]],7],17],[[8,8],17],[[[9,[16]],9],17],[[10,10],17],[[[11,[16]],11],17],[[],17],[[],17],[[],17],[[2,18],19],[[8,18],[[19,[14]]]],[[10,18],[[19,[1]]]],[[[2,[1]]],17],[[[3,[1]],17],[[3,[1]]]],[[[21,[[0,[20,1]]]],22],23],[[[21,[1]],22],23],[[[2,[20]],22],23],[[[3,[20]],22],23],[[6,22],23],[[[7,[20]],22],23],[[8,22],23],[[[9,[20]],22],23],[[10,22],23],[[[11,[20]],22],23],[24,[[21,[1]]]],[25,[[21,[1]]]],[[]],[26,[[21,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[11,[1]]],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,13],[[13,[0]]]],[[6,13],[[13,[0]]]],[[[2,[1]]],6],[[[3,[1]],6],[[3,[1]]]],[[6,13],[[13,[0]]]],[[6,13],[[13,[0]]]],[[[2,[1]]],15],[[[3,[1]],15],[[3,[1]]]],[[],[[3,[1]]]],[[],8],[[],10],[[],[[3,[1]]]],[[[11,[1]]],13],[[[2,[1]]],1],[[[3,[1]],1],[[3,[1]]]],[12],[[[12,[27]]],[[18,[[12,[27]]]]]],[18],[18,18],[18],[[[12,[27]]],[[18,[[12,[27]]]]]],[12],[18,18],[[[12,[27]]],[[18,[[12,[27]]]]]],[18,18],[18],[12],[[[7,[0]],12,13]],[[[9,[14]],12,13]],[[[11,[1]],12,13]],[28],[[[21,[1]]],[[30,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[[2,[1]]],1],[[[3,[1]],1],[[3,[1]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,17],10]],"p":[[8,"Float"],[3,"TweedieRegressorValidParams"],[3,"TweedieRegressorParams"],[4,"Result"],[8,"Clone"],[4,"Link"],[3,"TweedieRegressor"],[3,"IsotonicRegression"],[3,"FittedIsotonicRegression"],[3,"LinearRegression"],[3,"FittedLinearRegression"],[3,"ArrayBase"],[6,"Array1"],[8,"Float"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[3,"DatasetBase"],[6,"Result"],[8,"Debug"],[4,"LinearError"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"LinalgError"],[3,"Error"],[3,"Dim"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"linfa_logistic":{"doc":"Logistic Regression","t":[3,6,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["FittedLogisticRegression","LogisticRegression","MultiFittedLogisticRegression","MultiLogisticRegression","ValidLogisticRegression","ValidMultiLogisticRegression","borrow","borrow","borrow_mut","borrow_mut","classes","clone","clone","clone_into","clone_into","default_target","default_target","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","error","fit","fit","fmt","fmt","from","from","init","init","intercept","intercept","into","into","params","params","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_probabilities","predict_probabilities","serialize","serialize","set_threshold","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ArgMinError","Error","InitialParameterClassesMismatch","InitialParameterFeaturesMismatch","InvalidAlpha","InvalidGradientTolerance","InvalidInitialParameters","InvalidValues","LinfaError","MismatchedShapes","Result","WrongNumberOfClasses","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","cols","n_classes","n_features","rows"],"q":["linfa_logistic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_logistic::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_logistic::error::Error","","",""],"d":["A fitted logistic regression which can make predictions","A two-class logistic regression model.","A fitted multinomial logistic regression which can make â€¦","A multinomial class logistic regression model.","Validated version of <code>LogisticRegression</code>","Validated version of <code>MultiLogisticRegression</code>","","","","","Get the list of class labels, which maps the numerical â€¦","","","","","","","","","","","","","","","","","","Given a 2-dimensional feature matrix array <code>x</code> with shape â€¦","Given a 2-dimensional feature matrix array <code>x</code> with shape â€¦","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Given a feature matrix, predict the classes learned when â€¦","Given a feature matrix, predict the classes learned when â€¦","Given a feature matrix, predict the probabilities that a â€¦","Return normalized probabilities for each output class. The â€¦","","","Set the probability threshold for which the â€˜positiveâ€™ â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,12,15,4,3,4,3,4,3,4,3,4,3,4,3,4,4,4,4,3,3,3,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,22,0,22,22,22,22,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,29,29,30,30],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[3,[0,[0,[1,2]]]]]],[[[4,[[0,[2,0]],[0,[2,1,2]]]]],[[4,[[0,[2,0]],[0,[2,1,2]]]]]],[[[3,[2,[0,[2,1,2]]]]],[[3,[2,[0,[2,1,2]]]]]],[[]],[[]],[[[4,[0,[0,[1,2,5]]]],6],[[7,[[0,[1,2,5]]]]]],[[[3,[0,[0,[1,2,5]]]],6],[[7,[[0,[1,2,5]]]]]],[8],[8],[8],[8],[[],[[9,[[4,[0]]]]]],[[],[[9,[3]]]],[8],[8],[[[4,[[0,[10,0]],[0,[10,1,2]]]],4],11],[[[3,[10,[0,[10,1,2]]]],3],11],0,[[[12,[0]],13],14],[[[15,[0]],13],14],[[[4,[[0,[16,0]],[0,[16,1,2]]]],17],18],[[[3,[16,[0,[16,1,2]]]],17],18],[[]],[[]],[[],8],[[],8],0,[[[3,[0,[0,[1,2]]]]],7],[[]],[[]],[[[4,[0,[0,[1,2]]]]],7],[[[3,[0,[0,[1,2]]]]],19],[6],[13,13],[13],[[[6,[20]]],[[13,[[6,[20]]]]]],[6],[[[6,[20]]],[[13,[[6,[20]]]]]],[13],[13,13],[[[4,[0,[0,[1,2,5]]]],6,7]],[[[3,[0,[0,[1,2,5]]]],6,7]],[[[4,[0,[0,[1,2]]]],6],[[7,[0]]]],[[[3,[0,[0,[1,2]]]],6],[[19,[0]]]],[4,9],[3,9],0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],21],[[],21],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[8],[8],[8],[[22,17],18],[[22,17],18],[[]],[23,22],[24,22],[[],8],[[]],[25],[22,[[27,[26]]]],[[],28],[[],9],[[],9],[[],21],[[]],0,0,0,0],"p":[[8,"PartialOrd"],[8,"Clone"],[3,"MultiFittedLogisticRegression"],[3,"FittedLogisticRegression"],[8,"Default"],[3,"ArrayBase"],[6,"Array1"],[15,"usize"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[6,"ValidLogisticRegression"],[3,"DatasetBase"],[6,"Result"],[6,"ValidMultiLogisticRegression"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[6,"Array2"],[3,"Dim"],[3,"TypeId"],[4,"Error"],[4,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[13,"InitialParameterClassesMismatch"],[13,"InitialParameterFeaturesMismatch"]]},\
"linfa_nn":{"doc":"<code>linfa-nn</code> provides Rust implementations of common spatial â€¦","t":[3,13,3,4,4,13,3,13,3,3,13,3,8,8,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BallTree","BallTree","BallTreeIndex","BuildError","CommonNearestNeighbour","EmptyLeaf","KdTree","KdTree","KdTreeIndex","LinearSearch","LinearSearch","LinearSearchIndex","NearestNeighbour","NearestNeighbourIndex","NnError","WrongDimension","ZeroDimension","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distance","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_batch","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","from_batch_with_leaf_size","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","k_nearest","k_nearest","k_nearest","k_nearest","new","new","new","new","new","new","provide","provide","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","within_range","within_range","within_range","within_range","Distance","L1Dist","L2Dist","LInfDist","LpDist","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dist_to_rdist","dist_to_rdist","distance","distance","distance","distance","distance","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","new","rdist_to_dist","rdist_to_dist","rdistance","rdistance","to_gaussian_similarity","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["linfa_nn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_nn::distance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Implementation of ball tree, a space partitioning data â€¦","Ball Tree","Spatial indexing structure created by <code>BallTree</code>","Error returned when building nearest neighbour indices","Enum that dispatches to one of the crateâ€™s â€¦","","Implementation of K-D tree, a fast space-partitioning data â€¦","KD Tree","Spatial indexing structure created by <code>KdTree</code>","Implementation of linear search, which is the simplest â€¦","Linear search","Spatial indexing structure created by <code>LinearSearch</code>","Nearest neighbour algorithm builds a spatial index â€¦","A spatial index structure over a set of points, created by â€¦","Error returned when performing spatial queries on nearest â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Builds a spatial index using a default leaf size. See â€¦","Builds a spatial index using a MxN two-dimensional array â€¦","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>k</code> points in the index that are the closest to â€¦","","","","Creates a <code>BallTreeIndex</code> using the K-D construction â€¦","Creates an instance of <code>BallTree</code>","Creates a new <code>KdTreeIndex</code>","Creates an instance of <code>KdTree</code>","Creates a new <code>LinearSearchIndex</code>","Creates an instance of <code>LinearSearch</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns all the points in the index that are within the â€¦","","","","A distance function that can be used in spatial algorithms â€¦","L1 or Manhattan distance","L2 or Euclidean distance","L-infinte or Chebyshev distance","L-p or Minkowsky distance","","","","","","","","","","","","","","","","","","","","","","","","","Converts the result of <code>distance</code> to <code>rdistance</code>","","Computes the distance between two points. For most spatial â€¦","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Converts the result of <code>rdistance</code> to <code>distance</code>","","A faster version of the distance metric that keeps the â€¦","","Computes a similarity matrix with gaussian kernel and â€¦","","","","","","","","","","","","","","","","","","","",""],"i":[0,9,0,0,0,17,0,9,0,0,9,0,0,0,0,18,17,4,5,16,6,7,8,17,18,9,4,5,16,6,7,8,17,18,9,4,5,6,7,8,9,4,5,6,7,8,9,5,6,8,4,5,16,6,7,8,17,18,9,4,5,16,6,7,8,17,18,9,0,4,5,16,6,7,8,17,18,9,4,5,6,7,8,9,5,6,8,9,4,5,16,6,7,8,17,17,18,18,9,4,5,16,6,7,8,17,18,18,9,36,36,5,6,8,9,4,5,16,6,7,8,17,18,9,4,5,16,6,7,8,17,18,9,37,4,16,7,4,5,16,6,7,8,17,18,4,5,6,7,8,9,17,18,4,5,16,6,7,8,17,18,9,4,5,16,6,7,8,17,18,9,4,5,16,6,7,8,17,18,9,4,5,16,6,7,8,17,18,9,37,4,16,7,0,0,0,0,0,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,32,3,30,3,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,32,32,3,30,3,30,0,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,32,29,30,31,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]],[0,[1,[3,[[0,[1,2]]]]]]]]],[[4,[[0,[1,2]],[0,[1,[3,[[0,[1,2]]]]]]]]]],[5,5],[6,6],[[[7,[[0,[1,2]],[0,[1,[3,[[0,[1,2]]]]]]]]],[[7,[[0,[1,2]],[0,[1,[3,[[0,[1,2]]]]]]]]]],[8,8],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],6],[[],8],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],0,[10],[10],[10],[10],[10],[10],[10],[10],[10],[[[4,[[0,[11,2]],[0,[11,[3,[[0,[11,2]]]]]]]],4],12],[[5,5],12],[[6,6],12],[[[7,[[0,[11,2]],[0,[11,[3,[[0,[11,2]]]]]]]],7],12],[[8,8],12],[[9,9],12],[[],12],[[],12],[[],12],[[],12],[[[4,[[0,[13,2]],[0,[13,[3,[[0,[13,2]]]]]]]],14],15],[[5,14],15],[[[16,[[0,[13,2]],[0,[13,[3,[[0,[13,2]]]]]]]],14],15],[[6,14],15],[[[7,[[0,[13,2]],[0,[13,[3,[[0,[13,2]]]]]]]],14],15],[[8,14],15],[[17,14],15],[[17,14],15],[[18,14],15],[[18,14],15],[[9,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,18],[[]],[[]],[[20,[3,[2]]],[[23,[[22,[21]],17]]]],[[20,10,[3,[2]]],[[23,[[22,[21]],17]]]],[[5,20,10,[3,[2]]],[[23,[[22,[21]],17]]]],[[6,20,10,[3,[2]]],[[23,[[22,[21]],17]]]],[[8,20,10,[3,[2]]],[[23,[[22,[21]],17]]]],[[9,20,10,[3,[2]]],[[23,[[22,[21]],17]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,10],[[23,[25,18]]]],[[[4,[2,[3,[2]]]],[24,[2]],10],[[23,[25,18]]]],[[[16,[2,[3,[2]]]],[24,[2]],10],[[23,[25,18]]]],[[[7,[2,[3,[2]]]],[24,[2]],10],[[23,[25,18]]]],[[20,10,[3,[2]]],[[23,[[4,[2,[3,[2]]]],17]]]],[[],5],[[20,10,[3,[2]]],[[23,[[16,[2,[3,[2]]]],17]]]],[[],6],[[20,[3,[2]]],[[23,[[7,[2,[3,[2]]]],17]]]],[[],8],[26],[26],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,[[23,[25,18]]]],[[[4,[2,[3,[2]]]],[24,[2]],2],[[23,[25,18]]]],[[[16,[2,[3,[2]]]],[24,[2]],2],[[23,[25,18]]]],[[[7,[2,[3,[2]]]],[24,[2]],2],[[23,[25,18]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[30,30],[31,31],[[[32,[[0,[1,2]]]]],[[32,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[10],[10],[10],[10],[10],[10],[10],[10],[[]],[[30,2],2],[[[34,[33]],[34,[33]]]],[[29,[34,[2,33]],[34,[2,33]]],2],[[30,[34,[2,33]],[34,[2,33]]],2],[[31,[34,[2,33]],[34,[2,33]]],2],[[[32,[2]],[34,[2,33]],[34,[2,33]]],2],[10],[10],[10],[10],[[29,29],12],[[30,30],12],[[31,31],12],[[[32,[[0,[11,2]]]],32],12],[[],12],[[],12],[[],12],[[29,14],15],[[30,14],15],[[31,14],15],[[[32,[[0,[13,2]]]],14],15],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[2,[[32,[2]]]],[[]],[[30,2],2],[[[34,[33]],[34,[33]]]],[[30,[34,[2,33]],[34,[2,33]]],2],[[20,2],[[35,[2]]]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]]],"p":[[8,"Clone"],[8,"Float"],[8,"Distance"],[3,"BallTreeIndex"],[3,"BallTree"],[3,"KdTree"],[3,"LinearSearchIndex"],[3,"LinearSearch"],[4,"CommonNearestNeighbour"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"KdTreeIndex"],[4,"BuildError"],[4,"NnError"],[4,"ErrorKind"],[3,"ArrayBase"],[8,"Send"],[3,"Box"],[4,"Result"],[6,"ArrayView1"],[3,"Vec"],[3,"Demand"],[3,"String"],[3,"TypeId"],[3,"L1Dist"],[3,"L2Dist"],[3,"LInfDist"],[3,"LpDist"],[8,"Dimension"],[6,"ArrayView"],[6,"Array2"],[8,"NearestNeighbour"],[8,"NearestNeighbourIndex"]]},\
"linfa_pls":{"doc":"Partial Least Squares","t":[4,13,13,13,13,13,13,13,3,3,3,3,3,3,4,3,3,3,3,3,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Algorithm","BadComponentNumberError","InvalidTolerance","LinalgError","LinfaError","MinMaxError","Nipals","NotEnoughSamplesError","PlsCanonical","PlsCanonicalParams","PlsCanonicalValidParams","PlsCca","PlsCcaParams","PlsCcaValidParams","PlsError","PlsRegression","PlsRegressionParams","PlsRegressionValidParams","PlsSvd","PlsSvdParams","PowerMethodConstantResidualError","PowerMethodNotConvergedError","Result","Svd","ZeroMaxIter","algorithm","algorithm","algorithm","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check_ref","check_ref","check_ref","clone","clone","clone","clone_into","clone_into","clone_into","coefficients","coefficients","coefficients","default","default_target","default_target","default_target","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fit","fit","fit","fit","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse_transform","inverse_transform","inverse_transform","loadings","loadings","loadings","max_iterations","max_iterations","max_iterations","new","params","params","params","params","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","provide","rotations","rotations","rotations","scale","scale","scale","scale","source","to_owned","to_owned","to_owned","to_string","tolerance","tolerance","tolerance","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","weights","weights","weights","actual","upperbound"],"q":["linfa_plslinfa_pls::PlsError",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Set the algorithm used to estimate the first singular â€¦","Set the algorithm used to estimate the first singular â€¦","Set the algorithm used to estimate the first singular â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The coefficients of the linear model such that Y is â€¦","The coefficients of the linear model such that Y is â€¦","The coefficients of the linear model such that Y is â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transform the given dataset in the projected space back to â€¦","Transform the given dataset in the projected space back to â€¦","Transform the given dataset in the projected space back to â€¦","Loadings of records and targets","Loadings of records and targets","Loadings of records and targets","Set the maximum number of iterations of the power method â€¦","Set the maximum number of iterations of the power method â€¦","Set the maximum number of iterations of the power method â€¦","","","","","","","","","","","","","","","","","","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","Given an input matrix <code>X</code>, with shape <code>(n_samples, n_features)</code>â€¦","","Projection matrices used to transform records and targets","Projection matrices used to transform records and targets","Projection matrices used to transform records and targets","Set whether to scale the dataset","Set whether to scale the dataset","Set whether to scale the dataset","","","","","","","Set the tolerance used as convergence criteria in the â€¦","Set the tolerance used as convergence criteria in the â€¦","Set the tolerance used as convergence criteria in the â€¦","","Apply dimension reduction to the given dataset","Apply dimension reduction to the given dataset","Apply dimension reduction to the given dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Singular vectors of the cross-covariance matrices","Singular vectors of the cross-covariance matrices","Singular vectors of the cross-covariance matrices","",""],"i":[0,23,23,23,23,23,3,23,0,0,0,0,0,0,0,0,0,0,0,0,23,23,0,3,23,2,4,5,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,2,4,5,2,4,5,3,7,9,3,7,9,10,12,13,7,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,3,7,9,3,7,18,21,22,7,23,23,3,7,9,23,23,23,23,2,18,4,21,5,22,3,7,9,10,12,13,3,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,10,12,13,10,12,13,2,4,5,7,9,10,12,13,10,10,10,10,12,12,12,12,13,13,13,13,10,12,13,23,10,12,13,2,4,5,7,23,3,7,9,23,2,4,5,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,23,2,18,4,21,5,22,3,7,9,10,12,13,9,10,12,13,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],[[2,[1]]]],[[[4,[1]],3],[[4,[1]]]],[[[5,[1]],3],[[5,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],6],[[[4,[1]]],6],[[[5,[1]]],6],[[[2,[1]]],6],[[[4,[1]]],6],[[[5,[1]]],6],[3,3],[7,7],[[[9,[[0,[8,1]]]]],[[9,[[0,[8,1]]]]]],[[]],[[]],[[]],[[[10,[1]]],11],[[[12,[1]]],11],[[[13,[1]]],11],[[],7],[[[10,[1]],14],[[11,[1]]]],[[[12,[1]],14],[[11,[1]]]],[[[13,[1]],14],[[11,[1]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[3,3],16],[[7,7],16],[[[9,[[0,[17,1]]]],9],16],[[],16],[[],16],[[[18,[1]],19],20],[[[21,[1]],19],20],[[[22,[1]],19],20],[[7,19],20],[[23,24],25],[[23,24],25],[[3,24],25],[[7,24],25],[[[9,[[0,[26,1]]]],24],25],[27,23],[[]],[28,23],[29,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[[12,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[[13,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[[10,[1]]]],[[[12,[1]]]],[[[13,[1]]]],[[[2,[1]],15],[[2,[1]]]],[[[4,[1]],15],[[4,[1]]]],[[[5,[1]],15],[[5,[1]]]],[15,7],[15,7],[15,[[2,[1]]]],[15,[[4,[1]]]],[15,[[5,[1]]]],[19],[19,19],[[[14,[32]]],[[19,[[14,[32]]]]]],[14],[19,19],[14],[[[14,[32]]],[[19,[[14,[32]]]]]],[19],[19],[14],[[[14,[32]]],[[19,[[14,[32]]]]]],[19,19],[[[10,[1]],14,11]],[[[12,[1]],14,11]],[[[13,[1]],14,11]],[33],[[[10,[1]]]],[[[12,[1]]]],[[[13,[1]]]],[[[2,[1]],16],[[2,[1]]]],[[[4,[1]],16],[[4,[1]]]],[[[5,[1]],16],[[5,[1]]]],[[7,16],7],[23,[[35,[34]]]],[[]],[[]],[[]],[[],36],[[[2,[1]],1],[[2,[1]]]],[[[4,[1]],1],[[4,[1]]]],[[[5,[1]],1],[[5,[1]]]],[[[9,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[[10,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[[12,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[[13,[1]],[19,[[14,[30,31]],[14,[30,31]]]]],[[19,[[11,[1]],[11,[1]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[1]]]],[[[10,[1]]]],[[[12,[1]]]],[[[13,[1]]]],0,0],"p":[[8,"Float"],[3,"PlsRegressionParams"],[4,"Algorithm"],[3,"PlsCanonicalParams"],[3,"PlsCcaParams"],[4,"Result"],[3,"PlsSvdParams"],[8,"Clone"],[3,"PlsSvd"],[3,"PlsRegression"],[6,"Array2"],[3,"PlsCanonical"],[3,"PlsCca"],[3,"ArrayBase"],[15,"usize"],[15,"bool"],[8,"PartialEq"],[3,"PlsRegressionValidParams"],[3,"DatasetBase"],[6,"Result"],[3,"PlsCanonicalValidParams"],[3,"PlsCcaValidParams"],[4,"PlsError"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"MinMaxError"],[4,"LinalgError"],[4,"Error"],[8,"Data"],[6,"Ix2"],[3,"Dim"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[13,"BadComponentNumberError"]]},\
"linfa_preprocessing":{"doc":"Preprocessing","t":[3,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,13,13,13,13,13,13,13,13,13,13,13,13,4,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CountVectorizer","CountVectorizerParams","CountVectorizerValidParams","PreprocessingError","Result","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone","clone_into","clone_into","clone_into","column_for_word","convert_to_lowercase","convert_to_lowercase","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","document_frequency","document_frequency","drop","drop","drop","error","fit","fit","fit_files","fit_files","fit_vocabulary","fit_vocabulary","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","linear_scaling","n_gram_range","n_gram_range","nentries","norm_scaling","normalize","normalize","params","split_regex","split_regex","stopwords","stopwords","tf_idf_vectorization","to_owned","to_owned","to_owned","transform","transform_files","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vocabulary","vzip","vzip","vzip","whitening","EncodingError","FlippedDocumentFrequencies","FlippedMinMaxRange","FlippedNGramBoundaries","InvalidDocumentFrequencies","InvalidFloat","InvalidNGramBoundaries","IoError","LinalgError","LinfaError","NdarrayStatsEmptyError","NotEnoughSamples","PreprocessingError","RegexError","Result","TooManySubsamples","WrongMeasureForScaler","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","LinearScaler","LinearScalerParams","MaxAbs","MinMax","ScalingMethod","Standard","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","fit","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","max_abs","method","method","min_max","min_max_range","new","offsets","scales","standard","standard_no_mean","standard_no_std","to_owned","to_owned","to_owned","to_string","transform","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","NormScaler","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","init","into","l1","l2","max","to_owned","transform","transform","try_from","try_into","type_id","vzip","FittedTfIdfVectorizer","NonSmooth","Smooth","Textbook","TfIdfMethod","TfIdfVectorizer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compute_idf","convert_to_lowercase","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","document_frequency","drop","drop","drop","eq","equivalent","fit","fit_files","fit_vocabulary","fmt","fmt","fmt","from","from","from","hash","init","init","init","into","into","into","method","n_gram_range","nentries","normalize","split_regex","stopwords","to_owned","to_owned","to_owned","transform","transform_files","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vocabulary","vzip","vzip","vzip","Cholesky","FittedWhitener","Pca","Whitener","WhiteningMethod","Zca","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cholesky","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fit","fmt","fmt","fmt","from","from","from","hash","init","init","init","into","into","into","mean","method","pca","to_owned","to_owned","to_owned","transform","transform","transformation_matrix","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","zca"],"q":["linfa_preprocessing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::linear_scaling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::norm_scaling","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::tf_idf_vectorization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_preprocessing::whitening","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Counts the occurrences of each vocabulary entry, learned â€¦","","Count vectorizer: learns a vocabulary from a sequence of â€¦","","","","","","","","","","","","","","","","","","","If true, all documents used for fitting will be converted â€¦","","","","","","","","","Specifies the minimum and maximum (relative) document â€¦","","","","Error definitions for preprocessing","Learns a vocabulary from the documents in <code>x</code>, according to â€¦","Learns a vocabulary from the documents in <code>x</code>, according to â€¦","Learns a vocabulary from the documents contained in the â€¦","Learns a vocabulary from the documents contained in the â€¦","Produces a CountVectorizer with the input vocabulary. All â€¦","Produces a CountVectorizer with the input vocabulary. All â€¦","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Linear Scaling methods","","If set to <code>(1,1)</code> single tokens will be candidate vocabulary â€¦","Number of vocabulary entries learned during fitting","Sample normalization methods","","If true, all charachters in the documents used for fitting â€¦","Construct a new set of parameters","","Sets the regex espression used to split decuments into â€¦","","List of entries to be excluded from the generated â€¦","Term frequency - inverse document frequency vectorization â€¦","","","","Given a sequence of <code>n</code> documents, produces a sparse array â€¦","Given a sequence of <code>n</code> file names, produces a sparse array â€¦","","","","","","","","","","Contains all vocabulary entries, in the same order used by â€¦","","","","Methods for uncorrelating data","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","The result of fitting a linear scaler. Scales datasets â€¦","Linear Scaler: learns scaling parameters, according to the â€¦","","","Possible scaling methods for LinearScaler","","","","","","","","","","","","","","","","","","","","","","","","","","Fits the input dataset accordng to the scaler method. Will â€¦","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initializes a MaxAbs scaler","Setter for the scaler method","Returns the method used for fitting. Useful for printing, â€¦","Initializes a MinMax scaler with range <code>0..=1</code>","Initializes a MinMax scaler with the specified minimum and â€¦","Initializes the scaler with the specified method.","Array of size <code>n_features</code> that contains the offset that â€¦","Array of size <code>n_features</code> that contains the scale that will â€¦","Initializes a Standard scaler","Initializes a Standard scaler that does not subract the â€¦","Initializes a Stadard scaler that does not scale the â€¦","","","","","Scales an array of size (nsamples, nfeatures) according to â€¦","Substitutes the records of the dataset with their scaled â€¦","","","","","","","","","","","","","Norm scaler: scales all samples in a dataset to have unit â€¦","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Initializes a norm scaler that uses l1 norm","Initializes a norm scaler that uses l2 norm","Initializes a norm scaler that uses max norm","","Scales all samples in the array of shape (nsamples, â€¦","Substitutes the records of the dataset with their scaled â€¦","","","","","Counts the occurrences of each vocabulary entry, learned â€¦","Computes the idf as <code>log(n/document_frequency) +1</code>. The â€œâ€¦","Computes the idf as <code>log(1+n/1+document_frequency) + 1</code>. The â€¦","Textbook definition of idf, computed as â€¦","Methods for computing the inverse document frequency of a â€¦","Simlar to <code>CountVectorizer</code> but instead of just counting the â€¦","","","","","","","","","","","","","","If true, all documents used for fitting will be converted â€¦","","","","","","","","Specifies the minimum and maximum (relative) document â€¦","","","","","","Learns a vocabulary from the texts in <code>x</code>, according to the â€¦","","Produces a FittedTfIdfVectorizer with the input vocabulary.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inverse document frequency method used in the â€¦","If set to <code>(1,1)</code> single tokens will be candidate vocabulary â€¦","Number of vocabulary entries learned during fitting","If true, all charachters in the documents used for fitting â€¦","Sets the regex espression used to split decuments into â€¦","List of entries to be excluded from the generated â€¦","","","","Given a sequence of <code>n</code> documents, produces an array of size â€¦","","","","","","","","","","","Constains all vocabulary entries, in the same order used â€¦","","","","","Struct that can be used to whiten data. Data will be â€¦","","Struct that can be fitted to the input data to obtain the â€¦","","","","","","","","","Creates an instance of a Whitener that uses the cholesky â€¦","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The means that will be subtracted to the features before â€¦","","Creates an instance of a Whitener that uses the PCA method","","","","","","The matrix used for scaling the data","","","","","","","","","","","","","Creates an instance of a Whitener that uses the ZCA â€¦"],"i":[0,0,0,0,0,3,1,4,3,1,4,1,1,3,1,4,3,1,4,0,3,1,1,3,1,4,3,1,4,3,1,3,1,4,0,3,1,3,1,3,1,3,1,4,3,1,4,3,1,4,3,1,4,0,3,1,4,0,3,1,4,3,1,3,1,0,3,1,4,4,4,3,1,4,3,1,4,3,1,4,4,3,1,4,0,21,21,21,21,21,21,21,21,21,21,21,21,0,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,32,32,0,32,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,33,32,32,33,34,32,33,34,32,33,34,32,33,34,34,33,34,34,34,33,34,34,34,34,34,32,33,34,32,34,34,32,33,34,32,33,34,32,33,34,32,33,34,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,0,0,44,45,46,44,45,46,44,45,46,44,45,46,44,45,45,44,45,46,44,45,46,45,44,45,46,44,44,45,45,45,44,45,46,44,45,46,44,44,45,46,44,45,46,46,45,46,45,45,45,44,45,46,46,46,44,45,46,44,45,46,44,45,46,46,44,45,46,49,0,49,0,0,49,49,48,50,49,48,50,48,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,50,49,48,48,49,48,50,49,48,50,49,49,48,50,49,48,50,50,48,48,49,48,50,50,50,50,49,48,50,49,48,50,49,48,50,49,48,50,48],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,2],[3,3],[1,1],[4,4],[[]],[[]],[[]],0,[3,5],[[1,5],1],[[],1],[6],[6],[6],[6],[6],[6],[3],[[1,7,7],1],[6],[6],[6],0,[[3,8],[[9,[4]]]],[[1,8],[[9,[4]]]],[[3,10,11],[[9,[4]]]],[[1,10,11],[[9,[4]]]],[3,[[9,[4]]]],[1,[[9,[4]]]],[[3,12],13],[[1,12],13],[[4,12],13],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,[3],[[1,6,6],1],[4,6],0,[3,5],[[1,5],1],[[],1],[3,[[15,[14]]]],[[1,16],1],[3,17],[1,1],0,[[]],[[]],[[]],[[4,8],[[18,[6]]]],[[4,10,11],[[18,[6]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],19],[[],19],[[],19],[4,20],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[6],[6],[6],[[21,12],13],[[21,12],13],[22,21],[[]],[23,21],[24,21],[25,21],[26,21],[[],6],[[]],[27],[21,[[17,[28]]]],[[],29],[[],2],[[],2],[[],19],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[[0,[30,31]]]]],[[32,[[0,[30,31]]]]]],[[[33,[[0,[30,31]]]]],[[33,[[0,[30,31]]]]]],[[[34,[[0,[30,31]]]]],[[34,[[0,[30,31]]]]]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[[32,[[0,[35,31]]]],32],5],[[[33,[[0,[35,31]]]],33],5],[[[34,[[0,[35,31]]]],34],5],[[[33,[31]],36],9],[[[32,[[0,[37,31]]]],12],13],[[[32,[31]],12],13],[[[33,[[0,[37,31]]]],12],13],[[[34,[[0,[37,31]]]],12],13],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[],[[33,[31]]]],[[[33,[31]],[32,[31]]],[[33,[31]]]],[[[34,[31]]],32],[[],[[33,[31]]]],[[31,31],[[33,[31]]]],[[[32,[31]]],[[33,[31]]]],[[[34,[31]]],38],[[[34,[31]]],38],[[],[[33,[31]]]],[[],[[33,[31]]]],[[],[[33,[31]]]],[[]],[[]],[[]],[[],29],[[[34,[31]],[39,[31]]],[[39,[31]]]],[[[34,[31]],[36,[[8,[40,41]],42]]],[[36,[[39,[31]],42]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],19],[[],19],[[],19],[[]],[[]],[[]],0,[[]],[[]],[43,43],[[]],[6],[6],[6],[[43,43],5],[[],5],[[43,12],13],[[]],[[],6],[[]],[[],43],[[],43],[[],43],[[]],[[43,[39,[31]]],[[39,[31]]]],[[43,[36,[[8,[40,41]],42]]],[[36,[[39,[31]],42]]]],[[],2],[[],2],[[],19],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[45,45],[46,46],[[]],[[]],[[]],[[44,6,6],47],[[45,5],45],[[],45],[6],[6],[6],[6],[6],[6],[[45,7,7],45],[6],[6],[6],[[44,44],5],[[],5],[[45,8],[[9,[46]]]],[[45,10,11],[[9,[46]]]],[45,[[9,[46]]]],[[44,12],13],[[45,12],13],[[46,12],13],[[]],[[]],[[]],[44],[[],6],[[],6],[[],6],[[]],[[]],[[]],[46,44],[[45,6,6],45],[46,6],[[45,5],45],[[45,16],45],[45,45],[[]],[[]],[[]],[[46,8],[[18,[47]]]],[[46,10,11],[[18,[47]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],19],[[],19],[[],19],[46,20],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[49,49],[48,48],[[[50,[[0,[30,31]]]]],[[50,[[0,[30,31]]]]]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[49,49],5],[[48,48],5],[[[50,[[0,[35,31]]]],50],5],[[],5],[[],5],[[48,36],9],[[49,12],13],[[48,12],13],[[[50,[[0,[37,31]]]],12],13],[[]],[[]],[[]],[49],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[[50,[31]]],[[51,[31]]]],[[48,49],48],[[],48],[[]],[[]],[[]],[[[50,[31]],[39,[31]]],[[39,[31]]]],[[[50,[31]],[36,[[8,[40,41]],42]]],[[36,[[39,[31]],42]]]],[[[50,[31]]],[[52,[31]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[],48]],"p":[[3,"CountVectorizerParams"],[4,"Result"],[3,"CountVectorizerValidParams"],[3,"CountVectorizer"],[15,"bool"],[15,"usize"],[15,"f32"],[3,"ArrayBase"],[6,"Result"],[6,"EncodingRef"],[4,"DecoderTrap"],[3,"Formatter"],[6,"Result"],[3,"Regex"],[3,"Ref"],[15,"str"],[4,"Option"],[6,"CsMat"],[3,"TypeId"],[3,"Vec"],[4,"PreprocessingError"],[4,"Error"],[3,"EmptyInput"],[4,"LinalgError"],[3,"Error"],[4,"Error"],[3,"Demand"],[8,"Error"],[3,"String"],[8,"Clone"],[8,"Float"],[4,"ScalingMethod"],[3,"LinearScalerParams"],[3,"LinearScaler"],[8,"PartialEq"],[3,"DatasetBase"],[8,"Debug"],[6,"Array1"],[6,"Array2"],[8,"Data"],[6,"Ix2"],[8,"AsTargets"],[3,"NormScaler"],[4,"TfIdfMethod"],[3,"TfIdfVectorizer"],[3,"FittedTfIdfVectorizer"],[15,"f64"],[3,"Whitener"],[4,"WhiteningMethod"],[3,"FittedWhitener"],[6,"ArrayView1"],[6,"ArrayView2"]]},\
"linfa_reduction":{"doc":"Dimensional Reduction","t":[3,3,3,13,13,13,13,3,3,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,5,5,5],"n":["DiffusionMap","DiffusionMapParams","DiffusionMapValidParams","EmbeddingTooSmall","LinalgError","LinfaError","NotEnoughSamples","Pca","PcaParams","ReductionError","Result","StepsZero","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default_target","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eigvals","embedding","embedding_size","embedding_size","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","estimate_clusters","explained_variance","explained_variance_ratio","fit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","new","params","params","predict","predict","predict","predict","predict_inplace","provide","singular_values","source","steps","steps","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","vzip","whiten","generate_convoluted_rings","generate_convoluted_rings2d","generate_swissroll"],"q":["linfa_reduction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_reduction::utils","",""],"d":["Embedding of diffusion map technique","Diffusion map hyperparameters","Diffusion map hyperparameters","","","","","Fitted Principal Component Analysis model","Pincipal Component Analysis parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the eigenvalue of the diffusion operator","Return the embedding","","","","","","","","","","","Estimate the number of clusters in this embedding (very â€¦","Return the amount of explained variance per element","Return the normalized amount of explained variance per â€¦","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates the set of default parameters","","Create default parameter set","","","","","","","Return the singular values","","","Set the number of steps in the diffusion operator","","","","","","","Project a kernel matrix to its embedding","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply whitening to the embedding vector","","","Generates a three dimension swiss roll, centered at the â€¦"],"i":[0,0,0,21,21,21,21,0,0,0,0,21,4,5,1,21,6,7,4,5,1,21,6,7,1,1,4,5,1,6,7,4,5,1,6,7,1,7,4,5,1,21,6,7,4,5,1,21,6,7,4,5,1,21,6,7,4,4,5,1,4,5,1,6,7,5,1,6,4,7,7,6,4,5,1,21,21,6,7,4,5,1,21,21,21,6,7,4,5,1,21,6,7,4,5,1,21,6,7,1,4,7,7,7,7,7,7,21,7,21,5,1,4,5,1,6,7,21,5,7,4,5,1,21,6,7,4,5,1,21,6,7,4,5,1,21,6,7,0,4,5,1,21,6,7,6,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,2],[[[4,[3]]],[[4,[3]]]],[5,5],[1,1],[6,6],[[[7,[3]]],[[7,[3]]]],[[]],[[]],[[]],[[]],[[]],[[],1],[[[7,[8]],9],[[10,[8]]]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[[4,[8]]],12],[[[4,[8]]],10],[5,11],[[1,11],1],[[[4,[13]],4],14],[[5,5],14],[[1,1],14],[[6,6],14],[[[7,[13]],7],14],[[],14],[[],14],[[],14],[[[4,[8]]],11],[[[7,[15]]],[[12,[15]]]],[[[7,[15]]],[[12,[15]]]],[[6,16],[[17,[[7,[15]]]]]],[[[4,[18]],19],20],[[5,19],20],[[1,19],20],[[21,19],20],[[21,19],20],[[6,19],20],[[[7,[18]],19],20],[[]],[[]],[[]],[22,21],[23,21],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[11,1],[11,1],[11,6],[16,16],[16],[[[9,[24]]],[[16,[[9,[24]]]]]],[9],[[[7,[8]],9,10]],[25],[[[7,[15]]],12],[21,[[27,[26]]]],[5,11],[[1,11],1],[[]],[[]],[[]],[[]],[[]],[[],28],[[5,29],[[4,[8]]]],[[[7,[8]],[16,[[9,[30,31]]]]],[[16,[[10,[8]]]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,[[]],[[]],[[]],[[]],[[]],[[]],[[6,14],6],[11,[[10,[15]]]],[11,[[10,[15]]]],[[15,15,11],[[10,[15]]]]],"p":[[3,"DiffusionMapParams"],[4,"Result"],[8,"Clone"],[3,"DiffusionMap"],[3,"DiffusionMapValidParams"],[3,"PcaParams"],[3,"Pca"],[8,"Float"],[3,"ArrayBase"],[6,"Array2"],[15,"usize"],[6,"Array1"],[8,"PartialEq"],[15,"bool"],[15,"f64"],[3,"DatasetBase"],[6,"Result"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"ReductionError"],[4,"Error"],[4,"LinalgError"],[3,"Dim"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[6,"Kernel"],[8,"Data"],[6,"Ix2"],[3,"TypeId"]]},\
"linfa_svm":{"doc":"Support Vector Machines","t":[4,13,13,2,2,2,3,2,2,2,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ExitReason","ReachedIterations","ReachedThreshold","Result","SeparatingHyperplane","SolverParams","Svm","SvmError","SvmParams","SvmValidParams","alpha","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_target","default_target","default_target","default_target","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","error","fmt","fmt","fmt","from","from","hash","hyperparams","init","init","into","into","nsupport","params","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict","predict_inplace","predict_inplace","predict_inplace","predict_inplace","rho","solver_smo","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","weighted_sum","BaseCrate","InvalidC","InvalidEps","InvalidNu","Platt","Result","SvmError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","SvmParams","SvmValidParams","borrow","borrow","borrow_mut","borrow_mut","c","c_eps","check","check_ref","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eps","eq","eq","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fit","fmt","fmt","from","from","gaussian_kernel","init","init","into","into","kernel_params","linear_kernel","new","nu","nu_eps","nu_weight","platt_params","polynomial_kernel","pos_neg_weights","shrinking","solver_params","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_kernel_params","with_platt_params","Linear","SeparatingHyperplane","SolverParams","SolverState","WeightedCombination","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bound","calculate_rho","calculate_rho_nu","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","do_shrinking","do_shrinking_nu","drop","drop","drop","eps","eq","eq","eq","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","max_violating_pair","max_violating_pair_nu","nactive","new","ntotal","select_working_set","select_working_set_nu","should_shrunk","should_shrunk_nu","shrinking","solve","swap","target","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","vzip","vzip","vzip"],"q":["linfa_svm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm::error","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm::hyperparams","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linfa_svm::solver_smo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Reason for stopping","","","","","","Fitted Support Vector Machines model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the number of support vectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sums the inner product of <code>sample</code> and every one of the â€¦","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","SVM Hyperparameters","","","","","","Set the C value for regression","","","","","","","","","","","","","","Set stopping condition","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Sets the model to use the Gaussian kernel. For this kernel â€¦","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sets the model to use the Linear kernel. For this kernel â€¦","Create hyper parameter set","","Set the Nu-Eps value for regression","Set the Nu value for classification","","Sets the model to use the Polynomial kernel. For this â€¦","Set the C value for positive and negative samples.","Shrink active variable set","","","","","","","","","","","","Set the kernel to use for training","Set the platt params for probability calibration","","","Parameters of the solver routine","Current state of the SMO solver","","","","","","","","Return the k-th bound","","","","","","","","","","","","","","","","","","","","Stopping condition","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return max and min gradients of free variables","","Return number of active variables","Initialize a solver state","Return number of total variables","Select optimal working set","Select optimal working set","","","Should we shrink, e.g. ignore bounded alphas","","Swap two variables","Return target as positive/negative indicator","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,0,0,0,0,0,4,1,4,1,4,1,4,1,4,4,4,4,4,1,4,1,4,1,4,1,4,1,0,1,4,4,1,4,1,0,1,4,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,1,4,4,1,4,1,4,1,4,1,4,4,25,25,25,25,25,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,31,16,31,16,31,16,16,16,31,16,31,16,16,31,16,31,16,31,16,16,31,16,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,16,31,16,16,31,16,31,16,31,16,16,31,16,16,31,16,16,16,31,31,16,31,16,31,16,31,16,31,16,16,16,37,0,0,0,37,35,37,36,35,37,36,36,36,36,35,37,36,35,37,36,35,37,36,35,37,36,36,36,35,37,36,35,35,37,36,35,37,36,35,37,36,35,37,36,35,37,36,36,36,36,36,36,36,36,36,36,35,36,36,36,35,37,36,35,37,36,35,37,36,35,37,36,36,35,37,36],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[[4,[[0,[2,3]],2]]],[[4,[[0,[2,3]],2]]]],[[]],[[]],[[[4,[5,5]],6],[[7,[5]]]],[[[4,[3,8]],6],[[7,[8]]]],[[[4,[9,9]],6],[[7,[9]]]],[[[4,[3,10]],6],[[7,[10]]]],[11],[11],[11],[11],[11],[11],[[1,1],10],[[[4,[[0,[12,3]],12]],4],10],[[],10],0,[[1,13],14],[[[4,[[0,[15,3]],15]],13],14],[[[4,[3]],13],14],[[]],[[]],[1],0,[[],11],[[],11],[[]],[[]],[[[4,[3]]],11],[[],[[16,[3]]]],[[[4,[9,9]],[7,[9]]],9],[[[4,[9,9]],[17,[9]]],9],[[[4,[5,5]],[17,[5]]],5],[[[4,[5,5]],[7,[5]]],5],[18,18],[18],[[[6,[19]]],[[18,[[6,[19]]]]]],[6],[[[4,[3,10]],[6,[20,21]]],10],[[[4,[3,8]],[6,[20,21]]],8],[[[4,[5,5]],6,7]],[[[4,[9,9]],6,7]],[[[4,[3,10]],6,7]],[[[4,[3,8]],6,7]],0,0,[[]],[[]],[[],22],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[]],[[]],[[[4,[3]],6],3],0,0,0,0,0,0,0,[[]],[[]],[11],[11],[11],[[25,13],14],[[25,13],14],[26,25],[27,25],[[]],[[],11],[[]],[28],[25,[[30,[29]]]],[[],22],[[],23],[[],23],[[],24],[[]],0,0,[[]],[[]],[[]],[[]],[[[31,[3]]],30],[[[16,[3,3]],3,3],[[16,[3,3]]]],[[[16,[3]]],23],[[[16,[3]]],23],[[[31,[[0,[2,3]],2]]],[[31,[[0,[2,3]],2]]]],[[[16,[[0,[2,3]],2]]],[[16,[[0,[2,3]],2]]]],[[]],[[]],[[],[[16,[3]]]],[11],[11],[11],[11],[11],[11],[[[16,[3]],3],[[16,[3]]]],[[[31,[[0,[12,3]],12]],31],10],[[[16,[[0,[12,3]],12]],16],10],[[[31,[3,10]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[3,10]],18],32],[[[31,[3,8]],18],32],[[[31,[3,10]],18],32],[[[31,[3,8]],18],32],[[[31,[3,10]],18],32],[[[31,[3,8]],18],32],[[[31,[3,10]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[3,8]],18],32],[[[31,[5,5]],18],32],[[[31,[9,9]],18],32],[[[31,[5,5]],18],32],[[[31,[9,9]],18],32],[[[31,[3,8]],18],32],[[[31,[[0,[15,3]],15]],13],14],[[[16,[[0,[15,3]],15]],13],14],[[]],[[]],[[[16,[3]],3],[[16,[3]]]],[[],11],[[],11],[[]],[[]],[[[31,[3]]],33],[[[16,[3]]],[[16,[3]]]],[[],[[16,[3]]]],[[[31,[3]]],30],[[[16,[3,3]],3,3],[[16,[3,3]]]],[[[16,[3]],3],[[16,[3]]]],[[[31,[3]]],34],[[[16,[3]],3,3],[[16,[3]]]],[[[16,[3]],3,3],[[16,[3]]]],[[[16,[3]],10],[[16,[3]]]],[[[31,[3]]],35],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[]],[[]],[[[16,[3]],[33,[3]]],[[16,[3]]]],[[[16,[3]],[34,[3]]],[[16,[3]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[3,[0,[3]]]],11],3],[[[36,[3,[0,[3]]]]],3],[[[36,[3,[0,[3]]]]],3],[[[35,[[0,[2,3]]]]],[[35,[[0,[2,3]]]]]],[[[37,[[0,[2,3]]]]],[[37,[[0,[2,3]]]]]],[[[36,[[0,[2,3]],[0,[2,[0,[[0,[2,3]]]]]]]]],[[36,[[0,[2,3]],[0,[2,[0,[[0,[2,3]]]]]]]]]],[[]],[[]],[[]],[11],[11],[11],[11],[11],[11],[[[36,[3,[0,[3]]]]]],[[[36,[3,[0,[3]]]]]],[11],[11],[11],0,[[[35,[[0,[12,3]]]],35],10],[[[37,[[0,[12,3]]]],37],10],[[[36,[[0,[12,3]],[0,[12,[0,[[0,[12,3]]]]]]]],36],10],[[[35,[[0,[15,3]]]],13],14],[[[37,[[0,[15,3]]]],13],14],[[[36,[[0,[15,3]],[0,[15,[0,[[0,[15,3]]]]]]]],13],14],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[[36,[3,[0,[3]]]]]],[[[36,[3,[0,[3]]]]]],[[[36,[3,[0,[3]]]]],11],[[[38,[3]],[38,[3]],[38,[10]],[39,[3]],[0,[3]],[38,[3]],[35,[3]],10],[[36,[3,[0,[3]]]]]],[[[36,[3,[0,[3]]]]],11],[[[36,[3,[0,[3]]]]]],[[[36,[3,[0,[3]]]]]],[[[36,[3,[0,[3]]]],11,3,3],10],[[[36,[3,[0,[3]]]],11,3,3,3,3],10],0,[[[36,[3,[0,[3]]]]],[[4,[3,3]]]],[[[36,[3,[0,[3]]]],11,11]],[[[36,[3,[0,[3]]]],11],3],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[[36,[3,[0,[3]]]]]],[[]],[[]],[[]]],"p":[[4,"ExitReason"],[8,"Clone"],[8,"Float"],[3,"Svm"],[15,"f64"],[3,"ArrayBase"],[6,"Array1"],[3,"Pr"],[15,"f32"],[15,"bool"],[15,"usize"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"SvmParams"],[6,"ArrayView1"],[3,"DatasetBase"],[3,"Dim"],[8,"Data"],[6,"Ix1"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"SvmError"],[4,"PlattError"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"SvmValidParams"],[6,"Result"],[3,"KernelParams"],[3,"PlattParams"],[3,"SolverParams"],[3,"SolverState"],[4,"SeparatingHyperplane"],[3,"Vec"],[6,"ArrayView2"]]},\
"linfa_trees":{"doc":"Decision tree learning","tn":["DecisionTree","DecisionTreeParams","DecisionTreeValidParams","Entropy","Gini","NodeIter","Result","SplitQuality","Tikz","TreeNode","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_ref","children","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complete","default","default_target","depth","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","export_to_tikz","feature_importance","feature_name","features","fit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","is_leaf","iter_nodes","max_depth","max_depth","max_depth","mean_impurity_decrease","min_impurity_decrease","min_impurity_decrease","min_weight_leaf","min_weight_leaf","min_weight_split","min_weight_split","new","new","new","next","num_leaves","params","predict","predict","predict","predict","predict_inplace","prediction","relative_impurity_decrease","root_node","split","split_quality","split_quality","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_legend"],"q":["linfa_treesd":["A fitted decision tree model for classification.","","The set of hyperparameters that can be specified for â€¦","Measures the entropy of a subtree, defined as the sum over â€¦","Measures the degree of probability of a randomly chosen â€¦","Level-order (BFT) iterator of nodes in a decision tree","","The metric used to determine the feature by which a node â€¦","Struct to print a fitted decision tree in Tex using tikz â€¦","A node in the decision tree","","","","","","","","","","","","","","","","","Returns both children, first left then right","","","","","","","","","","","","","","","Whether a complete Tex document should be generated","","","Returns the depth of the node in the decision tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generates a <code>Tikz</code> structure to print the fitted tree in Tex â€¦","Return the feature importance, i.e. the relative impurity â€¦","Returns the name of the feature used in the split if the â€¦","Return features_idx of this tree (BFT)","Fit a decision tree using <code>hyperparamters</code> on the dataset â€¦","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the node has no children","Create a node iterator in level-order (BFT)","Return max depth of the tree","","Sets the optional limit to the depth of the decision tree","Return the mean impurity decrease for each feature","","Sets the minimum decrease in impurity that a split needs â€¦","","Sets the minimum weight of samples that a split has to â€¦","","Sets the minimum weight of samples required to split a â€¦","","","Creates a new Tikz structure for the decision tree with â€¦","","Return the number of leaves in this tree","Defaults are provided if the optional parameters are not â€¦","","","","","Make predictions for each row of a matrix of features <code>x</code>.","Returns <code>Some(prediction)</code> for leaf nodes and <code>None</code> for â€¦","Return the relative impurity decrease for each feature","Return root node of the tree","Return the split (feature index, value) and its impurity â€¦","","Sets the metric used to decide the feature on which to â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add a legend to the generated tree"],"i":[0,0,0,11,11,0,0,0,0,0,6,10,11,12,2,13,14,6,10,11,12,2,13,14,2,2,6,6,10,11,12,2,13,14,6,10,11,12,2,13,14,14,2,10,6,6,10,11,12,2,13,14,6,10,11,12,2,13,14,6,10,11,12,2,13,14,6,10,11,12,2,13,14,6,11,10,10,6,10,12,6,10,11,12,2,13,14,14,6,10,11,12,2,13,14,6,11,6,10,11,12,2,13,14,6,10,11,12,2,13,14,13,6,10,10,12,2,10,12,2,12,2,12,2,2,13,14,13,10,10,10,10,10,10,10,6,10,10,6,12,2,6,10,11,12,2,13,14,14,6,10,11,12,2,13,14,6,10,11,12,2,13,14,6,10,11,12,2,13,14,6,10,11,12,2,13,14,14],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],3],[[[6,[1,[0,[4,5]]]]],[[8,[7]]]],[[[6,[9,9]]],[[6,[9,9]]]],[[[10,[[0,[9,1]],[0,[9,4]]]]],[[10,[[0,[9,1]],[0,[9,4]]]]]],[11,11],[[[12,[9,9]]],[[12,[9,9]]]],[[[2,[9,9]]],[[2,[9,9]]]],[[[13,[9,9]]],[[13,[9,9]]]],[[[14,[[0,[9,1]],[0,[9,4,5]]]]],[[14,[[0,[9,1]],[0,[9,4,5]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[1,[0,[5,4]]]],15],[[14,[1,[0,[5,4]]]]]],[[],[[2,[1,4]]]],[[[10,[1,[0,[4,16]]]],17],[[18,[[0,[4,16]]]]]],[[[6,[1,[0,[4,5]]]]],19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[[6,6],15],[[[10,[[0,[20,1]],[0,[20,4]]]],10],15],[[11,11],15],[[[12,[20,20]],12],15],[[[2,[20,20]],2],15],[[[13,[20,20]],13],15],[[[14,[[0,[20,1]],[0,[20,4,5]]]],14],15],[[],15],[[],15],[[[10,[1,4]]],[[14,[1,4]]]],[[[10,[1,4]]],[[8,[1]]]],[[[6,[1,[0,[4,5]]]]],[[7,[21]]]],[[[10,[1,4]]],[[8,[19]]]],[[[12,[1,[0,[4,5]]]],22],3],[[[6,[5,5]],23],24],[[[10,[[0,[5,1]],[0,[5,4]]]],23],24],[[11,23],24],[[[12,[5,5]],23],24],[[[2,[5,5]],23],24],[[[13,[5,5]],23],24],[[[14,[[0,[5,1]],[0,[5,4,5]]]],23],24],[[[14,[1,[0,[5,4]]]],23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[1,4]]]],[11],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[1,[0,[4,5]]]]],15],[[[10,[1,4]]],[[13,[1,4]]]],[[[10,[1,4]]],19],[[[12,[1]]],[[7,[19]]]],[[[2,[1,4]],[7,[19]]],[[2,[1,4]]]],[[[10,[1,4]]],[[8,[1]]]],[[[12,[1]]],1],[[[2,[1,4]],1],[[2,[1,4]]]],[[[12,[1]]],25],[[[2,[1,4]],25],[[2,[1,4]]]],[[[12,[1]]],25],[[[2,[1,4]],25],[[2,[1,4]]]],[[],[[2,[1,4]]]],[[[8,[6]]],13],[10,[[14,[1,[0,[5,4]]]]]],[[[13,[1,[0,[5,4]]]]],7],[[[10,[1,4]]],19],[[],[[2,[1,4]]]],[22],[22,22],[17],[[[17,[26]]],[[22,[[17,[26]]]]]],[[[10,[1,[0,[4,16]]]],17,18]],[[[6,[1,[0,[4,5]]]]],[[7,[[0,[4,5]]]]]],[[[10,[1,4]]],[[8,[1]]]],[[[10,[1,4]]],6],[[[6,[1,[0,[4,5]]]]]],[[[12,[1]]],11],[[[2,[1,4]],11],[[2,[1,4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[1,[0,[5,4]]]]],[[14,[1,[0,[5,4]]]]]]],"p":[[8,"Float"],[3,"DecisionTreeParams"],[6,"Result"],[8,"Label"],[8,"Debug"],[3,"TreeNode"],[4,"Option"],[3,"Vec"],[8,"Clone"],[3,"DecisionTree"],[4,"SplitQuality"],[3,"DecisionTreeValidParams"],[3,"NodeIter"],[3,"Tikz"],[15,"bool"],[8,"Default"],[3,"ArrayBase"],[6,"Array1"],[15,"usize"],[8,"PartialEq"],[3,"String"],[3,"DatasetBase"],[3,"Formatter"],[6,"Result"],[15,"f32"],[3,"Dim"],[4,"Result"],[3,"TypeId"]]},\
"linfa_tsne":{"doc":"t-SNE","t":[13,13,13,13,13,13,13,6,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BaseCrate","EmbeddingSizeTooLarge","InvalidShape","NegativeApproximationThreshold","NegativePerplexity","PerplexityTooLarge","PreliminaryIterationsTooLarge","Result","TSneError","TSneParams","TSneValidParams","approx_threshold","approx_threshold","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check_ref","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","embedding_size","embedding_size","embedding_size_with_rng","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","into","into","into","max_iter","max_iter","perplexity","perplexity","preliminary_iter","preliminary_iter","provide","rng","source","to_owned","to_owned","to_string","transform","transform","transform","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["linfa_tsne","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Simplified <code>Result</code> using <code>TSneError</code> as error type","Error variants from hyper-parameter construction or model â€¦","","The t-SNE algorithm is a statistical method for â€¦","","Set the approximation threshold of the Barnes Hut algorithm","","","","","","","","Validates parameters","","","","","","","","","","","","","","","Create a t-SNE param set with given embedding size","Create a t-SNE param set with given embedding size and â€¦","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set the maximal number of iterations","","Set the perplexity of the t-SNE algorithm","","Set the number of iterations after which the true P â€¦","","","","","","","","","","","","","","","","","","","","","",""],"i":[11,11,11,11,11,11,11,0,0,0,0,2,5,11,2,5,11,2,5,5,5,2,5,2,5,11,2,5,11,2,5,11,2,5,2,5,5,2,5,11,11,2,5,11,11,11,2,5,11,2,5,11,2,5,2,5,2,5,2,5,11,2,11,2,5,11,2,2,5,5,11,2,5,11,2,5,11,2,5,11,2,5],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],1],[[[5,[1,[0,[3,4]]]],1],[[5,[1,[0,[3,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[1]]],6],[[[5,[1]]],6],[[[2,[4,4]]],[[2,[4,4]]]],[[[5,[4,4]]],[[5,[4,4]]]],[[]],[[]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[2,[1]]],7],[7,[[5,[1,8]]]],[[7,[0,[3,4]]],[[5,[1,[0,[3,4]]]]]],[[[2,[9,9]],2],10],[[[5,[9,9]],5],10],[[11,12],13],[[11,12],13],[[[2,[14,14]],12],13],[[[5,[14,14]],12],13],[15,11],[16,11],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[[2,[1]]],7],[[[5,[1,[0,[3,4]]]],7],[[5,[1,[0,[3,4]]]]]],[[[2,[1]]],1],[[[5,[1,[0,[3,4]]]],1],[[5,[1,[0,[3,4]]]]]],[[[2,[1]]],17],[[[5,[1,[0,[3,4]]]],7],[[5,[1,[0,[3,4]]]]]],[18],[[[2,[1]]]],[11,[[17,[19]]]],[[]],[[]],[[],20],[[[2,[1,[0,[3,4]]]],[22,[[21,[1]]]]],[[23,[[22,[[21,[1]]]]]]]],[[[2,[1,[0,[3,4]]]],[21,[1]]],[[23,[[21,[1]]]]]],[[[5,[1,[0,[3,4]]]],[21,[1]]],[[23,[[21,[1]]]]]],[[[5,[1,[0,[3,4]]]],[22,[[21,[1]]]]],[[23,[[22,[[21,[1]]]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[]],[[]],[[]]],"p":[[8,"Float"],[3,"TSneValidParams"],[8,"Rng"],[8,"Clone"],[3,"TSneParams"],[4,"Result"],[15,"usize"],[3,"SmallRng"],[8,"PartialEq"],[15,"bool"],[4,"TSneError"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Error"],[3,"ShapeError"],[4,"Option"],[3,"Demand"],[8,"Error"],[3,"String"],[6,"Array2"],[3,"DatasetBase"],[6,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
